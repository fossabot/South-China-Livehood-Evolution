{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#_1","title":"\u534e\u5357\u751f\u8ba1\u6f14\u53d8\u6a21\u578b","text":""},{"location":"#_2","title":"\u5f00\u59cb\u4f7f\u7528","text":""},{"location":"#_3","title":"\u4e0b\u8f7d/\u62c9\u53d6\u6a21\u578b\u4ee3\u7801","text":"<p>\u901a\u8fc7<code>Git</code>\u4e0b\u8f7d\u5e76\u5b89\u88c5\u8be5\u6a21\u578b\u7684\u6e90\u4ee3\u7801\uff0c\u5177\u4f53\u53ef\u53c2\u8003\uff1a</p> <pre><code>git clone https://github.com/SongshGeo/SC-20230710-SCE.git &lt;your folder name&gt;\n</code></pre>"},{"location":"#python","title":"\u5b89\u88c5Python\u548c\u5305\u4f9d\u8d56","text":"<p>\u5b89\u88c5<code>Python</code>\u6559\u7a0b\u4e00\u5927\u628a\uff0c\u672c\u6a21\u578b\u4f9d\u8d56<code>python &gt; 3.9</code>\u7248\u672c\u3002</p> <p>\u9009\u98791: \u9664\u4e86\u5b89\u88c5\u597d<code>python</code>\uff0c\u8fd8\u9700\u8981\u6839\u636e<code>requirements.txt</code>\u6587\u4ef6\u91cc\u7684\u4f9d\u8d56\u9879\uff0c\u5b89\u88c5\u6240\u9700\u8981\u7684\u5305\u3002\u5177\u4f53\u53ef\u4ee5\u53c2\u8003\u8fd9\u7bc7\u6587\u7ae0\u3002</p> <p>\u9009\u98792: \u6211\u4e2a\u4eba\u66f4\u5efa\u8bae\u4f7f\u7528<code>poetry</code>\u8fdb\u884c\u7ba1\u7406\uff0c\u501f\u52a9\u6211\u5199\u597d\u7684<code>makefile</code>\u4e00\u952e\u88c5\u8f7d\u6a21\u578b\uff0c\u5728\u8fd9\u91cc\u770b\u5982\u4f55\u5b89\u88c5poetry\u3002\u5b89\u88c5\u597d\u540e\uff0c\u5728\u9879\u76ee\u6240\u5728\u6587\u4ef6\u5939\u91cc\u7528\u547d\u4ee4\u884c\u8f93\u5165\uff1a</p> <pre><code>make setup\n</code></pre> <p>\u5373\u53ef\u81ea\u52a8\u5b89\u88c5\u6240\u6709\u7684\u6a21\u578b\u4f9d\u8d56\u5305\u3002</p>"},{"location":"#_4","title":"\u5c1d\u8bd5\u4f7f\u7528\u6a21\u578b","text":"<p>\u9996\u6b21\u4f7f\u7528\u6a21\u578b\u524d\uff0c\u5f3a\u70c8\u5efa\u8bae\u5148\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u6d4b\u8bd5\u6a21\u578b\u5b8c\u6574\u6027\uff1a</p> <pre><code>make test\n</code></pre> <p>\u8fd9\u4e2a\u539f\u7406\u662f\u4f7f\u7528\u4e86<code>pytest</code>\u5bf9\u7a0b\u5e8f\u8fdb\u884c\u6d4b\u8bd5\u3002\u6211\u5728\u5f00\u53d1\u6a21\u578b\u65f6\uff0c\u5df2\u7ecf\u5bf9\u6bcf\u4e00\u4e2a\u65b9\u6cd5\u8fdb\u884c\u4e86\u4e25\u683c\u7684\u6d4b\u8bd5\uff0c\u5982\u679c\u6d4b\u8bd5\u4e0d\u901a\u8fc7\uff0c\u8bf4\u660e\u8be5\u7248\u672c\u6a21\u578b\u5b58\u5728\u95ee\u9898\uff0c\u6216\u8005\u7528\u6237\u5bf9\u4ee3\u7801\u903b\u8f91\u8fdb\u884c\u4e86\u66f4\u6539\u5bfc\u81f4\u6709\u4e9b\u6d4b\u8bd5\u4e0d\u901a\u8fc7\u3002\u5982\u679c\u6709\u4ee3\u7801\u8c03\u8bd5\u80fd\u529b\uff0c\u53ef\u4ee5\u5728\u7ec8\u7aef\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u67e5\u770b\u62a5\u544a\uff0c\u770b\u770b\u95ee\u9898\u51fa\u5728\u54ea\uff1a</p> <pre><code>make report\n</code></pre> <ul> <li>\u63a5\u4e0b\u6765\u4f60\u53ef\u4ee5\u9075\u7167\u5feb\u901f\u5f00\u59cb\u8c03\u8bd5\u6a21\u578b</li> <li>\u5982\u679c\u60f3\u5bf9\u6a21\u578b\u7684\u4ee5\u4e0b\u90e8\u5206\u8fdb\u884c\u66f4\u6539\uff0c\u8bf7\u53c2\u7167\u4e0b\u9762\u7684\u65b9\u6cd5\u8bf4\u660e</li> </ul>"},{"location":"#_5","title":"\u65b9\u6cd5\u8bf4\u660e","text":"<ul> <li>\u6a21\u578b\u5de5\u4f5c\u6d41</li> <li>\u519c\u6c11\u4e3b\u4f53\u65b9\u6cd5</li> <li>\u72e9\u730e\u91c7\u96c6\u8005\u4e3b\u4f53\u65b9\u6cd5</li> <li>\u6591\u5757\u4e0e\u73af\u5883</li> </ul>"},{"location":"demo/","title":"\u5c1d\u8bd5\u8fd0\u884c\u6a21\u578b","text":"<p>Jupyter notebook \u662f\u4ea4\u4e92\u5f0f\u7684\u4ee3\u7801IDE\uff0c\u975e\u5e38\u9002\u5408\u65b0\u624b\uff0c\u5efa\u8bae\u6700\u5f00\u59cb\u5728\u8fd9\u91cc\u63a2\u7d22\u6211\u4eec\u7684\u6a21\u578b\u3002</p> In\u00a0[1]: Copied! <pre>%load_ext autoreload\n%autoreload 2\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\nfrom IPython.core.interactiveshell import InteractiveShell\n\nInteractiveShell.ast_node_interactivity = \"all\"\n\nimport pandas as pd\nimport numpy as np\nfrom hydra import compose, initialize\nimport os\n\n# \u52a0\u8f7d\u9879\u76ee\u5c42\u9762\u7684\u914d\u7f6e\nwith initialize(version_base=None, config_path=\"../config\"):\n    cfg = compose(config_name=\"config\")\nos.chdir(cfg.root)\n</pre> %load_ext autoreload %autoreload 2 %matplotlib inline %config InlineBackend.figure_format = 'retina' from IPython.core.interactiveshell import InteractiveShell  InteractiveShell.ast_node_interactivity = \"all\"  import pandas as pd import numpy as np from hydra import compose, initialize import os  # \u52a0\u8f7d\u9879\u76ee\u5c42\u9762\u7684\u914d\u7f6e with initialize(version_base=None, config_path=\"../config\"):     cfg = compose(config_name=\"config\") os.chdir(cfg.root) In\u00a0[2]: Copied! <pre>%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set(context=\"notebook\", style=\"whitegrid\")\n\nimport rasterio\n\nwith rasterio.open(cfg.db.lim_h) as dataset:\n    arr = dataset.read(1)\n    plt.imshow(arr)\n</pre> %matplotlib inline import matplotlib.pyplot as plt import seaborn as sns  sns.set(context=\"notebook\", style=\"whitegrid\")  import rasterio  with rasterio.open(cfg.db.lim_h) as dataset:     arr = dataset.read(1)     plt.imshow(arr) Out[2]: <pre>&lt;matplotlib.image.AxesImage at 0x16d498ed0&gt;</pre> <p>\u6ce8\u610f\u4e0b\u9762\u8fd9\u91cc\u9700\u8981\u628a\u4f60\u4e0a\u9762\u8bfb\u53d6\u7684\u53c2\u6570\u914d\u7f6e\u6587\u4ef6\uff0c\u4f5c\u4e3a\u53c2\u6570<code>parameters=cfg</code>\u8f93\u5165\u5230\u6a21\u578b\u4e2d\u3002</p> In\u00a0[3]: Copied! <pre># \u4ece\u8fd9\u4e2a\u8def\u5f84\u52a0\u8f7d\u6a21\u578b\nfrom src.model import Model\n\nmodel = Model(parameters=cfg)\n</pre> # \u4ece\u8fd9\u4e2a\u8def\u5f84\u52a0\u8f7d\u6a21\u578b from src.model import Model  model = Model(parameters=cfg) <p>\u589e\u52a0\u4e86\u521d\u59cb\u7684 Hunters\uff0c\u968f\u673a\u751f\u6210\u5728\u5730\u56fe\u4e0a</p> In\u00a0[4]: Copied! <pre>model.heatmap()\n</pre> model.heatmap() <p>\u8bbe\u7f6e100\u5e74\u7684\u8bdd\uff0c\u6a21\u578b\u7684\u8fd0\u884c\u53ef\u80fd\u9700\u8981\u51e0\u5206\u949f\u7684\u65f6\u95f4\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u6a21\u578b\u6ca1\u8fd0\u7b97\u5b8c\u4e0d\u8981\u592a\u7740\u6025\u3002\u5b8c\u6210\u540e\u4f1a\u81ea\u52a8\u505a\u51fa\u4e0b\u9762\u7684\u6298\u7ebf\u56fe\u3002</p> In\u00a0[5]: Copied! <pre>model.run_model()\n</pre> model.run_model() <pre>tick[100] 2023-11-25 19:46:13</pre> <p>\u5c55\u793a\u4e3b\u4f53\u7684\u4fe1\u606f</p> In\u00a0[6]: Copied! <pre>agent = model.agents.to_list().random_choose()\nagent.report()\n</pre> agent = model.agents.to_list().random_choose() agent.report() Out[6]: <pre>unique_id         6481\nbreed           Hunter\nsize              21.0\nposition     (71, 248)\ndtype: object</pre> In\u00a0[7]: Copied! <pre>model.heatmap()\n</pre> model.heatmap() In\u00a0[8]: Copied! <pre>for cell in model.nature.dem.array_cells.ravel():\n    if len(cell.agents) &gt; 1:\n        cell.agents\n</pre> for cell in model.nature.dem.array_cells.ravel():     if len(cell.agents) &gt; 1:         cell.agents In\u00a0[9]: Copied! <pre>model.hunters\nmodel.farmers\n</pre> model.hunters model.farmers Out[9]: <pre>&lt;ActorsList: (892)Hunter&gt;</pre> Out[9]: <pre>&lt;ActorsList: (21)Farmer&gt;</pre> In\u00a0[10]: Copied! <pre>import seaborn as sns\n\nsns.histplot(model.farmers.array(\"size\"))\n</pre> import seaborn as sns  sns.histplot(model.farmers.array(\"size\")) Out[10]: <pre>&lt;Axes: ylabel='Count'&gt;</pre> In\u00a0[11]: Copied! <pre>sns.histplot(model.hunters.array(\"size\"))\n</pre> sns.histplot(model.hunters.array(\"size\")) Out[11]: <pre>&lt;Axes: ylabel='Count'&gt;</pre>"},{"location":"demo/","title":"\u5c1d\u8bd5\u8fd0\u884c\u6a21\u578b\u00b6","text":""},{"location":"quick_start/","title":"Quick Start","text":""},{"location":"quick_start/#_1","title":"\u5feb\u901f\u5f00\u59cb","text":"<p>\u6211\u57fa\u672c\u4e0a\u5df2\u7ecf\u628a\u6a21\u578b\u7684\u4e3b\u8981\u5de5\u4f5c\u6d41\u90fd\u96c6\u6210\u597d\u4e86\uff0c\u7528\u6237\u53ea\u9700\u8981\u5728<code>jupyter notebook</code>\u91cc\uff08\u6216\u8005\u5176\u5b83\u4f60\u559c\u6b22\u7684\u53ef\u4ee5\u65b9\u4fbf\u505a\u56fe\u7684IDE\u91cc\uff09\u52a0\u8f7d\u5e76\u8fd0\u884c\u6a21\u578b\u5c31\u53ef\u4ee5\u4e86\uff0c\u6bd4\u5982\u6a21\u4eff\u8fd9\u91cc\u3002</p> <p>\u91cd\u8981\u7684\u662f\u4f60\u53ef\u4ee5\u7ed9\u6a21\u578b\u7684\u53c2\u6570\u8fdb\u884c\u8c03\u6574\uff0c\u4f8b\u5982\uff1a</p> <pre><code>model:\n  loss_rate: 0.5  # \u7ade\u4e89\u5931\u8d25\u8005\u7684\u4eba\u53e3\u635f\u5931\u7cfb\u6570\n\nenv:\n# 1 \u4e9a\u70ed\u5e26\u5e38\u7eff\u9614\u53f6\u6797\u7c7b\u578b=1042.57\u4eba/32.65\u767e\u5e73\u65b9\u516c\u91cc\uff0831.93\u4eba/\u767e\u5e73\u65b9\u516c\u91cc\uff09\u3001\u6d77\u5cb8\u5e38\u7eff\u9614\u53f6\u6797\u7c7b\u578b=2892.17\u4eba/72.72\u767e\u5e73\u65b9\u516c\u91cc\uff0839.77\u4eba/\u767e\u5e73\u65b9\u516c\u91cc\uff09\uff08Binford 2001: 143\uff09\u6d77\u5cb8\u5730\u5e26\u53ef\u4ee5\u53c2\u8003\u5373\u6709\u8003\u53e4\u53d1\u6398\u6750\u6599\u8bbe\u7f6e\u4eba\u53e3\u5c40\u9650\u8f83\u9ad8\u7684\u5730\u5757\uff1b2 \u53c2\u8003\u5df2\u6709\u5168\u7403\u72e9\u730e\u91c7\u96c6\u8005\u4eba\u53e3\u4e0a\u9650\u8ba1\u7b97\u7ed3\u679c\uff08Tallavaara et al. 2017 \u53ca\u8865\u5145\u6750\u6599\uff1b\n  lim_h: 31.93\n\ntime:\n  start: 2000\n  end: 2100\n  freq: 'Y'\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\uff0c\u51e0\u4e4e\u5927\u591a\u6570\u7684\u53c2\u6570\u90fd\u662f\u5f88\u76f4\u89c2\u7684\u547d\u540d\uff0c\u4f60\u80fd\u5f88\u5bb9\u6613\u63a8\u65ad\u9700\u8981\u6539\u54ea\u91cc\u3002\u6ce8\u610f\u4e0d\u8981\u7834\u574f\u53c2\u6570\u540d\u79f0\u524d\u9762\u7684\u7f29\u8fdb\uff0c\u4e5f\u4e0d\u8981\u8f7b\u6613\u4fee\u6539\u53c2\u6570\u540d\u3002</p> <p>\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u4f60\u53ef\u4ee5\u521b\u5efa\u66f4\u591a\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u800c\u4e0d\u662f\u5728\u4e00\u4e2a\u914d\u7f6e\u6587\u4ef6\u91cc\u53cd\u590d\u4fee\u6539\u3002\u6bd4\u5982\u4f60\u53ef\u4ee5\u5728\u9879\u76ee\u76ee\u5f55\u4e0b\u7684<code>config</code>\u6587\u4ef6\u5939\u91cc\u521b\u5efa\u53e6\u4e00\u4e2a\u914d\u7f6e\u6587\u4ef6\u7684\u526f\u672c<code>config_2.yaml</code>\uff0c\u7136\u540e\u5728<code>notebook</code>\u4e2d\u8fd0\u884c\u65f6\uff0c\u9009\u62e9\u5bf9\u5e94\u7684\u53c2\u6570\u6587\u4ef6\u8f93\u5165\u6a21\u578b\u5c31\u53ef\u4ee5\u4e86\uff0c\u5982\uff1a</p> <pre><code># \u52a0\u8f7d\u9879\u76ee\u5c42\u9762\u7684\u914d\u7f6e\nwith initialize(version_base=None, config_path=\"../config\"):\n    cfg = compose(config_name=\"config_2\")  # \u4fee\u6539\u8fd9\u91cc\nos.chdir(cfg.root)\n</code></pre> <p>\u73a9\u7684\u6109\u5feb\uff01</p>"},{"location":"api/env/","title":"env","text":"<p>\u73af\u5883\u5305\u62ec\u4e86\u4e24\u4e2a\u7c7b\uff0c\u5373\u6591\u5757\uff08CompetingCell\uff09\u548c\u73af\u5883\uff08Env\uff09\u3002\u73af\u5883\u4f1a\u81ea\u52a8\u6839\u636e\u8f93\u5165\u7684\u6805\u683c\u6587\u4ef6\u521b\u5efa\u8db3\u591f\u6570\u91cf\u7684\u6591\u5757\uff0c\u6bcf\u4e00\u4e2a\u6591\u5757\u662f\u4e3b\u4f53\u5177\u4f53\u6240\u5728\u7684\u4f4d\u7f6e\u3002</p>"},{"location":"api/env/#_1","title":"\u6591\u5757","text":"<p>             Bases: <code>PatchCell</code></p> <p>\u72e9\u730e\u91c7\u96c6\u8005\u548c\u519c\u6c11\u7ade\u4e89\u7684\u821e\u53f0</p> Source code in <code>src/env.py</code> <pre><code>class CompetingCell(PatchCell):\n    \"\"\"\u72e9\u730e\u91c7\u96c6\u8005\u548c\u519c\u6c11\u7ade\u4e89\u7684\u821e\u53f0\"\"\"\n\n    def __init__(self, pos=None, indices=None):\n        super().__init__(pos, indices)\n        self.lim_h: float = cfg.env.lim_h\n        self.lim_g: float = cfg.env.lim_g\n        self.slope: float = np.random.uniform(0, 30)\n        self.aspect: float = np.random.uniform(0, 360)\n        self.elevation: float = np.random.uniform(0, 300)\n        self._is_water: bool = np.random.choice([True, False], p=[0.05, 0.95])\n        # arable level for farmers.\n        self.arable_level: float = np.random.uniform(0.0, 3.0)\n\n    @raster_attribute\n    def farmers(self) -&gt; int:\n        \"\"\"\u8fd9\u91cc\u7684\u519c\u6c11\u6709\u591a\u5c11\uff08size\uff09\"\"\"\n        if len(self.agents) &gt; 1:\n            raise ValueError(\"More than one agent locates here.\")\n        if self.has_agent(\"Farmer\"):\n            return self.linked_attr(\"size\")\n        return 0\n\n    @raster_attribute\n    def hunters(self) -&gt; int:\n        \"\"\"\u8fd9\u91cc\u7684\u519c\u6c11\u6709\u591a\u5c11\uff08size\uff09\"\"\"\n        if len(self.agents) &gt; 1:\n            raise ValueError(\"More than one agent locates here.\")\n        if self.has_agent(\"Hunter\"):\n            return self.linked_attr(\"size\")\n        return 0\n\n    @raster_attribute\n    def is_water(self) -&gt; bool:\n        \"\"\"\u662f\u5426\u662f\u6c34\u4f53\"\"\"\n        return self._is_water or self.elevation &lt;= 0\n\n    @is_water.setter\n    def is_water(self, value: bool) -&gt; None:\n        \"\"\"\u8bbe\u7f6e\u662f\u5426\u6c34\u4f53\"\"\"\n        if not isinstance(value, bool):\n            raise TypeError(f\"Should be bool, got {type(value)} instead.\")\n        self._is_water = value\n\n    @raster_attribute\n    def is_arable(self) -&gt; bool:\n        \"\"\"\u662f\u5426\u662f\u53ef\u8015\u5730\uff0c\u53ea\u6709\u540c\u65f6\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff0c\u624d\u80fd\u6210\u4e3a\u4e00\u4e2a\u53ef\u8015\u5730:\n        1. \u5761\u5ea6\u5c0f\u4e8e10\u5ea6\u3002\n        2. \u5761\u5411\u4e0d\u662f\u671d\u5317\u7684\uff08\u5982\u679c\u662f0-45\u5ea6\u6216315-360\u5ea6\uff0c\u610f\u5473\u7740\u671d\u5317\u7684\uff0c\u4e0d\u5229\u4e8e\u79cd\u690d\uff09\u3002\n        3. \u6d77\u62d4\u9ad8\u5ea6\u5c0f\u4e8e200m\u3002\n        4. \u4e0d\u662f\u6c34\u4f53\u3002\n\n        &gt;  1. \u8003\u53e4\u9057\u5740\u5206\u5e03\u63a8\u6f14\u51fa\u7684\u5206\u5e03\u7279\u5f81\uff08Wu et al. 2023 \u4e2d\u519c\u4e1a\u76f8\u5173\u9057\u5740\u6570\u636e\uff09\n        &gt; 2 \u53d1\u5c55\u519c\u4e1a\u6240\u9700\u7684\u4e00\u822c\u6761\u4ef6\uff1a\u5761\u5ea6\u5c0f\u4e8e20\uff0c\u6d77\u62d4\u3001\u5761\u5411\u2026\u2026\uff08Shelach, 1999; Qiao, 2010\uff09\uff1b\n        &gt; 3 \u4eca\u5929\u7684\u519c\u4e1a\u7528\u5730\u5206\u5e03\u7279\u5f81\uff1f\n\n        returns:\n            \u662f\u5426\u662f\u8015\u5730\uff0c\u662f\u5219\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\u3002\n        \"\"\"\n\n        # \u5761\u5ea6\u5c0f\u4e8e10\u5ea6\n        cond1 = self.slope &lt;= 10\n        # \u5982\u679c\u662f0-45\u5ea6\u6216315-360\u5ea6\uff0c\u610f\u5473\u7740\u671d\u5317\u7684\uff0c\u4e0d\u5229\u4e8e\u79cd\u690d\n        cond2 = self.aspect &lt; 315 and self.aspect &gt; 45\n        # \u6d77\u62d4\u9ad8\u5ea6\u5c0f\u4e8e200m\n        cond3 = (self.elevation &lt; 200) and (self.elevation &gt; 0)\n        # \u4e09\u4e2a\u6761\u4ef6\u90fd\u6ee1\u8db3\u624d\u662f\u53ef\u8015\u5730\n        cond4 = not self.is_water\n        return cond1 and cond2 and cond3 and cond4\n\n    def able_to_live(self, agent: SiteGroup) -&gt; None:\n        \"\"\"\u68c0\u67e5\u8be5\u4e3b\u4f53\u80fd\u5426\u80fd\u5230\u7279\u5b9a\u7684\u5730\u65b9:\n        1. \u5bf9\u72e9\u730e\u91c7\u96c6\u8005\u800c\u8a00\uff0c\u53ea\u8981\u4e0d\u662f\u6c34\u57df\n        2. \u5bf9\u519c\u6c11\u800c\u8a00\uff0c\u9700\u8981\u662f\u53ef\u8015\u5730\n\n        Args:\n            agent (SiteGroup): \u72e9\u730e\u91c7\u96c6\u8005\u6216\u8005\u519c\u6c11\uff0c\u9700\u8981\u88ab\u68c0\u67e5\u7684\u4e3b\u4f53\u3002\n\n        Returns:\n            \u5982\u679c\u88ab\u68c0\u67e5\u7684\u4e3b\u4f53\u80fd\u591f\u5728\u6b64\u5904\u5b58\u6d3b\uff0c\u8fd4\u56deTrue\uff1b\u5426\u5219\u8fd4\u56deFalse\u3002\n        \"\"\"\n        if isinstance(agent, Hunter):\n            return not self.is_water\n        if isinstance(agent, Farmer):\n            cond1 = not self.has_agent()\n            return self.is_arable &amp; cond1\n        if isinstance(agent, SiteGroup):\n            return True\n        raise TypeError(\"Agent must be People, Farmer or Hunter.\")\n\n    def suitable_level(self, agent: Farmer | Hunter) -&gt; float:\n        \"\"\"\u6839\u636e\u6b64\u5904\u7684\u4e3b\u4f53\u7c7b\u578b\uff0c\u8fd4\u56de\u4e00\u4e2a\u9002\u5b9c\u5176\u505c\u7559\u7684\u6c34\u5e73\u503c\u3002\n\n        Args:\n            agent (Farmer | Hunter): \u72e9\u730e\u91c7\u96c6\u8005\u6216\u8005\u519c\u6c11\u3002\n\n        Returns:\n            \u9002\u5408\u8be5\u7c7b\u4e3b\u4f53\u505c\u7559\u6b64\u5904\u7684\u9002\u5b9c\u5ea6\u3002\n\n        Raises:\n            TypeError: \u5982\u679c\u8f93\u5165\u7684\u4e3b\u4f53\u4e0d\u662f\u72e9\u730e\u91c7\u96c6\u8005\u6216\u8005\u519c\u6c11\uff0c\u5219\u4f1a\u629b\u51faTypeError\u5f02\u5e38\u3002\n        \"\"\"\n        if isinstance(agent, Hunter):\n            return 1.0\n        if isinstance(agent, Farmer):\n            return self.arable_level\n        if isinstance(agent, SiteGroup):\n            return 1.0\n        raise TypeError(\"Agent must be Farmer or Hunter.\")\n\n    def convert(self, agent: Farmer | Hunter):\n        \"\"\"\u8ba9\u6b64\u5904\u7684\u519c\u6c11\u4e0e\u72e9\u730e\u91c7\u96c6\u8005\u4e4b\u95f4\u4e92\u76f8\u8f6c\u5316\u3002\n\n        Args:\n            agent (Farmer | Hunter): \u72e9\u730e\u91c7\u96c6\u8005\u6216\u8005\u519c\u6c11\uff0c\u9700\u8981\u88ab\u8f6c\u5316\u7684\u4e3b\u4f53\u3002\n\n        Returns:\n            \u88ab\u8f6c\u5316\u7684\u4e3b\u4f53\u3002\u8f93\u5165\u519c\u6c11\uff0c\u5219\u8f6c\u5316\u4e3a\u4e00\u4e2a\u72e9\u730e\u91c7\u96c6\u8005\uff1b\u8f93\u5165\u72e9\u730e\u91c7\u96c6\u8005\uff0c\u5219\u8f6c\u5316\u4e3a\u4e00\u4e2a\u519c\u6c11\u3002\n\n        Raises:\n            TypeError: \u5982\u679c\u8f93\u5165\u7684\u4e3b\u4f53\u4e0d\u662f\u72e9\u730e\u91c7\u96c6\u8005\u6216\u8005\u519c\u6c11\uff0c\u5219\u4f1a\u629b\u51faTypeError\u5f02\u5e38\u3002\n        \"\"\"\n        if isinstance(agent, Farmer):\n            convert_to = Hunter\n        elif isinstance(agent, Hunter):\n            convert_to = Farmer\n        else:\n            raise TypeError(\"Agent must be Farmer or Hunter.\")\n        # \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u4e3b\u4f53\n        # print(f\"Going to create size {agent.size} {convert_to}\")\n        converted = self.layer.model.agents.create(\n            convert_to, size=agent.size, singleton=True\n        )\n        agent.die()  # \u65e7\u7684\u4e3b\u4f53\u6b7b\u4ea1\n        converted.put_on(self)\n        return converted\n</code></pre>"},{"location":"api/env/#src.env.CompetingCell.able_to_live","title":"<code>able_to_live(agent)</code>","text":"<p>\u68c0\u67e5\u8be5\u4e3b\u4f53\u80fd\u5426\u80fd\u5230\u7279\u5b9a\u7684\u5730\u65b9: 1. \u5bf9\u72e9\u730e\u91c7\u96c6\u8005\u800c\u8a00\uff0c\u53ea\u8981\u4e0d\u662f\u6c34\u57df 2. \u5bf9\u519c\u6c11\u800c\u8a00\uff0c\u9700\u8981\u662f\u53ef\u8015\u5730</p> <p>Parameters:</p> Name Type Description Default <code>agent</code> <code>SiteGroup</code> <p>\u72e9\u730e\u91c7\u96c6\u8005\u6216\u8005\u519c\u6c11\uff0c\u9700\u8981\u88ab\u68c0\u67e5\u7684\u4e3b\u4f53\u3002</p> required <p>Returns:</p> Type Description <code>None</code> <p>\u5982\u679c\u88ab\u68c0\u67e5\u7684\u4e3b\u4f53\u80fd\u591f\u5728\u6b64\u5904\u5b58\u6d3b\uff0c\u8fd4\u56deTrue\uff1b\u5426\u5219\u8fd4\u56deFalse\u3002</p> Source code in <code>src/env.py</code> <pre><code>def able_to_live(self, agent: SiteGroup) -&gt; None:\n    \"\"\"\u68c0\u67e5\u8be5\u4e3b\u4f53\u80fd\u5426\u80fd\u5230\u7279\u5b9a\u7684\u5730\u65b9:\n    1. \u5bf9\u72e9\u730e\u91c7\u96c6\u8005\u800c\u8a00\uff0c\u53ea\u8981\u4e0d\u662f\u6c34\u57df\n    2. \u5bf9\u519c\u6c11\u800c\u8a00\uff0c\u9700\u8981\u662f\u53ef\u8015\u5730\n\n    Args:\n        agent (SiteGroup): \u72e9\u730e\u91c7\u96c6\u8005\u6216\u8005\u519c\u6c11\uff0c\u9700\u8981\u88ab\u68c0\u67e5\u7684\u4e3b\u4f53\u3002\n\n    Returns:\n        \u5982\u679c\u88ab\u68c0\u67e5\u7684\u4e3b\u4f53\u80fd\u591f\u5728\u6b64\u5904\u5b58\u6d3b\uff0c\u8fd4\u56deTrue\uff1b\u5426\u5219\u8fd4\u56deFalse\u3002\n    \"\"\"\n    if isinstance(agent, Hunter):\n        return not self.is_water\n    if isinstance(agent, Farmer):\n        cond1 = not self.has_agent()\n        return self.is_arable &amp; cond1\n    if isinstance(agent, SiteGroup):\n        return True\n    raise TypeError(\"Agent must be People, Farmer or Hunter.\")\n</code></pre>"},{"location":"api/env/#src.env.CompetingCell.convert","title":"<code>convert(agent)</code>","text":"<p>\u8ba9\u6b64\u5904\u7684\u519c\u6c11\u4e0e\u72e9\u730e\u91c7\u96c6\u8005\u4e4b\u95f4\u4e92\u76f8\u8f6c\u5316\u3002</p> <p>Parameters:</p> Name Type Description Default <code>agent</code> <code>Farmer | Hunter</code> <p>\u72e9\u730e\u91c7\u96c6\u8005\u6216\u8005\u519c\u6c11\uff0c\u9700\u8981\u88ab\u8f6c\u5316\u7684\u4e3b\u4f53\u3002</p> required <p>Returns:</p> Type Description <p>\u88ab\u8f6c\u5316\u7684\u4e3b\u4f53\u3002\u8f93\u5165\u519c\u6c11\uff0c\u5219\u8f6c\u5316\u4e3a\u4e00\u4e2a\u72e9\u730e\u91c7\u96c6\u8005\uff1b\u8f93\u5165\u72e9\u730e\u91c7\u96c6\u8005\uff0c\u5219\u8f6c\u5316\u4e3a\u4e00\u4e2a\u519c\u6c11\u3002</p> <p>Raises:</p> Type Description <code>TypeError</code> <p>\u5982\u679c\u8f93\u5165\u7684\u4e3b\u4f53\u4e0d\u662f\u72e9\u730e\u91c7\u96c6\u8005\u6216\u8005\u519c\u6c11\uff0c\u5219\u4f1a\u629b\u51faTypeError\u5f02\u5e38\u3002</p> Source code in <code>src/env.py</code> <pre><code>def convert(self, agent: Farmer | Hunter):\n    \"\"\"\u8ba9\u6b64\u5904\u7684\u519c\u6c11\u4e0e\u72e9\u730e\u91c7\u96c6\u8005\u4e4b\u95f4\u4e92\u76f8\u8f6c\u5316\u3002\n\n    Args:\n        agent (Farmer | Hunter): \u72e9\u730e\u91c7\u96c6\u8005\u6216\u8005\u519c\u6c11\uff0c\u9700\u8981\u88ab\u8f6c\u5316\u7684\u4e3b\u4f53\u3002\n\n    Returns:\n        \u88ab\u8f6c\u5316\u7684\u4e3b\u4f53\u3002\u8f93\u5165\u519c\u6c11\uff0c\u5219\u8f6c\u5316\u4e3a\u4e00\u4e2a\u72e9\u730e\u91c7\u96c6\u8005\uff1b\u8f93\u5165\u72e9\u730e\u91c7\u96c6\u8005\uff0c\u5219\u8f6c\u5316\u4e3a\u4e00\u4e2a\u519c\u6c11\u3002\n\n    Raises:\n        TypeError: \u5982\u679c\u8f93\u5165\u7684\u4e3b\u4f53\u4e0d\u662f\u72e9\u730e\u91c7\u96c6\u8005\u6216\u8005\u519c\u6c11\uff0c\u5219\u4f1a\u629b\u51faTypeError\u5f02\u5e38\u3002\n    \"\"\"\n    if isinstance(agent, Farmer):\n        convert_to = Hunter\n    elif isinstance(agent, Hunter):\n        convert_to = Farmer\n    else:\n        raise TypeError(\"Agent must be Farmer or Hunter.\")\n    # \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u4e3b\u4f53\n    # print(f\"Going to create size {agent.size} {convert_to}\")\n    converted = self.layer.model.agents.create(\n        convert_to, size=agent.size, singleton=True\n    )\n    agent.die()  # \u65e7\u7684\u4e3b\u4f53\u6b7b\u4ea1\n    converted.put_on(self)\n    return converted\n</code></pre>"},{"location":"api/env/#src.env.CompetingCell.farmers","title":"<code>farmers()</code>","text":"<p>\u8fd9\u91cc\u7684\u519c\u6c11\u6709\u591a\u5c11\uff08size\uff09</p> Source code in <code>src/env.py</code> <pre><code>@raster_attribute\ndef farmers(self) -&gt; int:\n    \"\"\"\u8fd9\u91cc\u7684\u519c\u6c11\u6709\u591a\u5c11\uff08size\uff09\"\"\"\n    if len(self.agents) &gt; 1:\n        raise ValueError(\"More than one agent locates here.\")\n    if self.has_agent(\"Farmer\"):\n        return self.linked_attr(\"size\")\n    return 0\n</code></pre>"},{"location":"api/env/#src.env.CompetingCell.hunters","title":"<code>hunters()</code>","text":"<p>\u8fd9\u91cc\u7684\u519c\u6c11\u6709\u591a\u5c11\uff08size\uff09</p> Source code in <code>src/env.py</code> <pre><code>@raster_attribute\ndef hunters(self) -&gt; int:\n    \"\"\"\u8fd9\u91cc\u7684\u519c\u6c11\u6709\u591a\u5c11\uff08size\uff09\"\"\"\n    if len(self.agents) &gt; 1:\n        raise ValueError(\"More than one agent locates here.\")\n    if self.has_agent(\"Hunter\"):\n        return self.linked_attr(\"size\")\n    return 0\n</code></pre>"},{"location":"api/env/#src.env.CompetingCell.is_arable","title":"<code>is_arable()</code>","text":"<p>\u662f\u5426\u662f\u53ef\u8015\u5730\uff0c\u53ea\u6709\u540c\u65f6\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff0c\u624d\u80fd\u6210\u4e3a\u4e00\u4e2a\u53ef\u8015\u5730: 1. \u5761\u5ea6\u5c0f\u4e8e10\u5ea6\u3002 2. \u5761\u5411\u4e0d\u662f\u671d\u5317\u7684\uff08\u5982\u679c\u662f0-45\u5ea6\u6216315-360\u5ea6\uff0c\u610f\u5473\u7740\u671d\u5317\u7684\uff0c\u4e0d\u5229\u4e8e\u79cd\u690d\uff09\u3002 3. \u6d77\u62d4\u9ad8\u5ea6\u5c0f\u4e8e200m\u3002 4. \u4e0d\u662f\u6c34\u4f53\u3002</p> <ol> <li>\u8003\u53e4\u9057\u5740\u5206\u5e03\u63a8\u6f14\u51fa\u7684\u5206\u5e03\u7279\u5f81\uff08Wu et al. 2023 \u4e2d\u519c\u4e1a\u76f8\u5173\u9057\u5740\u6570\u636e\uff09 2 \u53d1\u5c55\u519c\u4e1a\u6240\u9700\u7684\u4e00\u822c\u6761\u4ef6\uff1a\u5761\u5ea6\u5c0f\u4e8e20\uff0c\u6d77\u62d4\u3001\u5761\u5411\u2026\u2026\uff08Shelach, 1999; Qiao, 2010\uff09\uff1b 3 \u4eca\u5929\u7684\u519c\u4e1a\u7528\u5730\u5206\u5e03\u7279\u5f81\uff1f</li> </ol> <p>Returns:</p> Type Description <code>bool</code> <p>\u662f\u5426\u662f\u8015\u5730\uff0c\u662f\u5219\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\u3002</p> Source code in <code>src/env.py</code> <pre><code>@raster_attribute\ndef is_arable(self) -&gt; bool:\n    \"\"\"\u662f\u5426\u662f\u53ef\u8015\u5730\uff0c\u53ea\u6709\u540c\u65f6\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff0c\u624d\u80fd\u6210\u4e3a\u4e00\u4e2a\u53ef\u8015\u5730:\n    1. \u5761\u5ea6\u5c0f\u4e8e10\u5ea6\u3002\n    2. \u5761\u5411\u4e0d\u662f\u671d\u5317\u7684\uff08\u5982\u679c\u662f0-45\u5ea6\u6216315-360\u5ea6\uff0c\u610f\u5473\u7740\u671d\u5317\u7684\uff0c\u4e0d\u5229\u4e8e\u79cd\u690d\uff09\u3002\n    3. \u6d77\u62d4\u9ad8\u5ea6\u5c0f\u4e8e200m\u3002\n    4. \u4e0d\u662f\u6c34\u4f53\u3002\n\n    &gt;  1. \u8003\u53e4\u9057\u5740\u5206\u5e03\u63a8\u6f14\u51fa\u7684\u5206\u5e03\u7279\u5f81\uff08Wu et al. 2023 \u4e2d\u519c\u4e1a\u76f8\u5173\u9057\u5740\u6570\u636e\uff09\n    &gt; 2 \u53d1\u5c55\u519c\u4e1a\u6240\u9700\u7684\u4e00\u822c\u6761\u4ef6\uff1a\u5761\u5ea6\u5c0f\u4e8e20\uff0c\u6d77\u62d4\u3001\u5761\u5411\u2026\u2026\uff08Shelach, 1999; Qiao, 2010\uff09\uff1b\n    &gt; 3 \u4eca\u5929\u7684\u519c\u4e1a\u7528\u5730\u5206\u5e03\u7279\u5f81\uff1f\n\n    returns:\n        \u662f\u5426\u662f\u8015\u5730\uff0c\u662f\u5219\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\u3002\n    \"\"\"\n\n    # \u5761\u5ea6\u5c0f\u4e8e10\u5ea6\n    cond1 = self.slope &lt;= 10\n    # \u5982\u679c\u662f0-45\u5ea6\u6216315-360\u5ea6\uff0c\u610f\u5473\u7740\u671d\u5317\u7684\uff0c\u4e0d\u5229\u4e8e\u79cd\u690d\n    cond2 = self.aspect &lt; 315 and self.aspect &gt; 45\n    # \u6d77\u62d4\u9ad8\u5ea6\u5c0f\u4e8e200m\n    cond3 = (self.elevation &lt; 200) and (self.elevation &gt; 0)\n    # \u4e09\u4e2a\u6761\u4ef6\u90fd\u6ee1\u8db3\u624d\u662f\u53ef\u8015\u5730\n    cond4 = not self.is_water\n    return cond1 and cond2 and cond3 and cond4\n</code></pre>"},{"location":"api/env/#src.env.CompetingCell.is_water","title":"<code>is_water(value)</code>","text":"<p>\u8bbe\u7f6e\u662f\u5426\u6c34\u4f53</p> Source code in <code>src/env.py</code> <pre><code>@is_water.setter\ndef is_water(self, value: bool) -&gt; None:\n    \"\"\"\u8bbe\u7f6e\u662f\u5426\u6c34\u4f53\"\"\"\n    if not isinstance(value, bool):\n        raise TypeError(f\"Should be bool, got {type(value)} instead.\")\n    self._is_water = value\n</code></pre>"},{"location":"api/env/#src.env.CompetingCell.suitable_level","title":"<code>suitable_level(agent)</code>","text":"<p>\u6839\u636e\u6b64\u5904\u7684\u4e3b\u4f53\u7c7b\u578b\uff0c\u8fd4\u56de\u4e00\u4e2a\u9002\u5b9c\u5176\u505c\u7559\u7684\u6c34\u5e73\u503c\u3002</p> <p>Parameters:</p> Name Type Description Default <code>agent</code> <code>Farmer | Hunter</code> <p>\u72e9\u730e\u91c7\u96c6\u8005\u6216\u8005\u519c\u6c11\u3002</p> required <p>Returns:</p> Type Description <code>float</code> <p>\u9002\u5408\u8be5\u7c7b\u4e3b\u4f53\u505c\u7559\u6b64\u5904\u7684\u9002\u5b9c\u5ea6\u3002</p> <p>Raises:</p> Type Description <code>TypeError</code> <p>\u5982\u679c\u8f93\u5165\u7684\u4e3b\u4f53\u4e0d\u662f\u72e9\u730e\u91c7\u96c6\u8005\u6216\u8005\u519c\u6c11\uff0c\u5219\u4f1a\u629b\u51faTypeError\u5f02\u5e38\u3002</p> Source code in <code>src/env.py</code> <pre><code>def suitable_level(self, agent: Farmer | Hunter) -&gt; float:\n    \"\"\"\u6839\u636e\u6b64\u5904\u7684\u4e3b\u4f53\u7c7b\u578b\uff0c\u8fd4\u56de\u4e00\u4e2a\u9002\u5b9c\u5176\u505c\u7559\u7684\u6c34\u5e73\u503c\u3002\n\n    Args:\n        agent (Farmer | Hunter): \u72e9\u730e\u91c7\u96c6\u8005\u6216\u8005\u519c\u6c11\u3002\n\n    Returns:\n        \u9002\u5408\u8be5\u7c7b\u4e3b\u4f53\u505c\u7559\u6b64\u5904\u7684\u9002\u5b9c\u5ea6\u3002\n\n    Raises:\n        TypeError: \u5982\u679c\u8f93\u5165\u7684\u4e3b\u4f53\u4e0d\u662f\u72e9\u730e\u91c7\u96c6\u8005\u6216\u8005\u519c\u6c11\uff0c\u5219\u4f1a\u629b\u51faTypeError\u5f02\u5e38\u3002\n    \"\"\"\n    if isinstance(agent, Hunter):\n        return 1.0\n    if isinstance(agent, Farmer):\n        return self.arable_level\n    if isinstance(agent, SiteGroup):\n        return 1.0\n    raise TypeError(\"Agent must be Farmer or Hunter.\")\n</code></pre>"},{"location":"api/env/#_2","title":"\u73af\u5883","text":"<p>             Bases: <code>BaseNature</code></p> <p>\u73af\u5883\u7c7b</p> Source code in <code>src/env.py</code> <pre><code>class Env(BaseNature):\n    \"\"\"\n    \u73af\u5883\u7c7b\n    \"\"\"\n\n    def __init__(self, model, name=\"env\"):\n        super().__init__(model, name)\n        self.dem = self.create_module(\n            how=\"from_file\",\n            raster_file=cfg.db.dem,\n            cell_cls=CompetingCell,\n            attr_name=\"elevation\",\n        )\n        arr = self._open_rasterio(cfg.db.slo)\n        self.dem.apply_raster(arr, attr_name=\"slope\")\n        arr = self._open_rasterio(cfg.db.asp)\n        self.dem.apply_raster(arr, attr_name=\"aspect\")\n        arr = self._open_rasterio(cfg.db.farmland)\n        self.dem.apply_raster(arr, attr_name=\"arable_level\")\n        arr = self._open_rasterio(cfg.db.lim_h)\n        self.dem.apply_raster(arr, attr_name=\"lim_h\")\n\n    def _open_rasterio(self, source: str) -&gt; np.ndarray:\n        with rasterio.open(source) as dataset:\n            arr = dataset.read(1)\n            arr = np.where(arr &lt; 0, np.nan, arr)\n        return arr.reshape((1, arr.shape[0], arr.shape[1]))\n\n    def add_hunters(self, ratio: float | None = 0.05):\n        \"\"\"\n        \u6dfb\u52a0\u521d\u59cb\u7684\u72e9\u730e\u91c7\u96c6\u8005\uff0c\u968f\u673a\u62bd\u53d6\u4e00\u4e9b\u6591\u5757\uff0c\u5c06\u521d\u59cb\u7684\u72e9\u730e\u91c7\u96c6\u8005\u653e\u4e0a\u53bb\n        \"\"\"\n        not_water = ~self.dem.get_raster(attr_name=\"is_water\").astype(bool)\n        not_water = not_water.reshape(self.dem.shape2d)\n        not_water_cells = self.dem.array_cells[not_water]\n        num = int(self.params.get(\"init_hunters\", ratio) * not_water.sum())\n        hunters = self.model.agents.create(Hunter, num=num)\n        cells = np.random.choice(not_water_cells, size=num, replace=False)\n        for hunter, cell in zip(hunters, cells):\n            hunter.put_on(cell)\n            hunter.random_size()\n\n    def add_farmers(self):\n        \"\"\"\n        \u6dfb\u52a0\u4ece\u5317\u65b9\u6765\u7684\u519c\u6c11\uff0c\u6839\u636e\u5168\u5c40\u53d8\u91cf\u7684\u6cca\u677e\u5206\u5e03\u6a21\u62df\u3002\u5173\u4e8e\u6cca\u677e\u5206\u5e03\u7684\u4ecb\u7ecd\u53ef\u4ee5\u770b[\u8fd9\u4e2a\u94fe\u63a5](https://zhuanlan.zhihu.com/p/373751245)\u3002\u5f53\u6cca\u677e\u5206\u5e03\u751f\u6210\u7684\u519c\u6c11\u88ab\u521b\u5efa\u65f6\uff0c\u5c06\u5176\u653e\u7f6e\u5728\u5730\u56fe\u4e0a\u4efb\u610f\u4e00\u4e2a\u53ef\u8015\u5730\u3002\n\n        Returns:\n            \u672c\u6b21\u65b0\u6dfb\u52a0\u7684\u519c\u6c11\u5217\u8868\u3002\n        \"\"\"\n        farmers_num = np.random.poisson(self.params.lam)\n        farmers = self.model.agents.create(Farmer, num=farmers_num)\n        arable = self.dem.get_raster(\"is_arable\").reshape(self.dem.shape2d)\n        arable_cells = self.dem.array_cells[arable.astype(bool)]\n        for farmer in farmers:\n            min_size, max_size = farmer.params.new_group_size\n            farmer.size = farmer.random.randint(min_size, max_size)\n        # \u4ece\u53ef\u8015\u5730\u3001\u6ca1\u6709\u4e3b\u4f53\u7684\u91cc\u9762\u9009\n        arable_cells = ActorsList(self.model, arable_cells)\n        valid_cells = arable_cells.select(\n            ~arable_cells.trigger(\"has_agent\")\n        ).random_choose(size=farmers_num, replace=False, as_list=True)\n        for farmer, cell in zip(farmers, valid_cells):\n            if not cell:\n                raise ValueError(f\"arable_cells {cell} is None\")\n            farmer.put_on(cell)\n        return farmers\n</code></pre>"},{"location":"api/env/#src.env.Env.add_farmers","title":"<code>add_farmers()</code>","text":"<p>\u6dfb\u52a0\u4ece\u5317\u65b9\u6765\u7684\u519c\u6c11\uff0c\u6839\u636e\u5168\u5c40\u53d8\u91cf\u7684\u6cca\u677e\u5206\u5e03\u6a21\u62df\u3002\u5173\u4e8e\u6cca\u677e\u5206\u5e03\u7684\u4ecb\u7ecd\u53ef\u4ee5\u770b\u8fd9\u4e2a\u94fe\u63a5\u3002\u5f53\u6cca\u677e\u5206\u5e03\u751f\u6210\u7684\u519c\u6c11\u88ab\u521b\u5efa\u65f6\uff0c\u5c06\u5176\u653e\u7f6e\u5728\u5730\u56fe\u4e0a\u4efb\u610f\u4e00\u4e2a\u53ef\u8015\u5730\u3002</p> <p>Returns:</p> Type Description <p>\u672c\u6b21\u65b0\u6dfb\u52a0\u7684\u519c\u6c11\u5217\u8868\u3002</p> Source code in <code>src/env.py</code> <pre><code>def add_farmers(self):\n    \"\"\"\n    \u6dfb\u52a0\u4ece\u5317\u65b9\u6765\u7684\u519c\u6c11\uff0c\u6839\u636e\u5168\u5c40\u53d8\u91cf\u7684\u6cca\u677e\u5206\u5e03\u6a21\u62df\u3002\u5173\u4e8e\u6cca\u677e\u5206\u5e03\u7684\u4ecb\u7ecd\u53ef\u4ee5\u770b[\u8fd9\u4e2a\u94fe\u63a5](https://zhuanlan.zhihu.com/p/373751245)\u3002\u5f53\u6cca\u677e\u5206\u5e03\u751f\u6210\u7684\u519c\u6c11\u88ab\u521b\u5efa\u65f6\uff0c\u5c06\u5176\u653e\u7f6e\u5728\u5730\u56fe\u4e0a\u4efb\u610f\u4e00\u4e2a\u53ef\u8015\u5730\u3002\n\n    Returns:\n        \u672c\u6b21\u65b0\u6dfb\u52a0\u7684\u519c\u6c11\u5217\u8868\u3002\n    \"\"\"\n    farmers_num = np.random.poisson(self.params.lam)\n    farmers = self.model.agents.create(Farmer, num=farmers_num)\n    arable = self.dem.get_raster(\"is_arable\").reshape(self.dem.shape2d)\n    arable_cells = self.dem.array_cells[arable.astype(bool)]\n    for farmer in farmers:\n        min_size, max_size = farmer.params.new_group_size\n        farmer.size = farmer.random.randint(min_size, max_size)\n    # \u4ece\u53ef\u8015\u5730\u3001\u6ca1\u6709\u4e3b\u4f53\u7684\u91cc\u9762\u9009\n    arable_cells = ActorsList(self.model, arable_cells)\n    valid_cells = arable_cells.select(\n        ~arable_cells.trigger(\"has_agent\")\n    ).random_choose(size=farmers_num, replace=False, as_list=True)\n    for farmer, cell in zip(farmers, valid_cells):\n        if not cell:\n            raise ValueError(f\"arable_cells {cell} is None\")\n        farmer.put_on(cell)\n    return farmers\n</code></pre>"},{"location":"api/env/#src.env.Env.add_hunters","title":"<code>add_hunters(ratio=0.05)</code>","text":"<p>\u6dfb\u52a0\u521d\u59cb\u7684\u72e9\u730e\u91c7\u96c6\u8005\uff0c\u968f\u673a\u62bd\u53d6\u4e00\u4e9b\u6591\u5757\uff0c\u5c06\u521d\u59cb\u7684\u72e9\u730e\u91c7\u96c6\u8005\u653e\u4e0a\u53bb</p> Source code in <code>src/env.py</code> <pre><code>def add_hunters(self, ratio: float | None = 0.05):\n    \"\"\"\n    \u6dfb\u52a0\u521d\u59cb\u7684\u72e9\u730e\u91c7\u96c6\u8005\uff0c\u968f\u673a\u62bd\u53d6\u4e00\u4e9b\u6591\u5757\uff0c\u5c06\u521d\u59cb\u7684\u72e9\u730e\u91c7\u96c6\u8005\u653e\u4e0a\u53bb\n    \"\"\"\n    not_water = ~self.dem.get_raster(attr_name=\"is_water\").astype(bool)\n    not_water = not_water.reshape(self.dem.shape2d)\n    not_water_cells = self.dem.array_cells[not_water]\n    num = int(self.params.get(\"init_hunters\", ratio) * not_water.sum())\n    hunters = self.model.agents.create(Hunter, num=num)\n    cells = np.random.choice(not_water_cells, size=num, replace=False)\n    for hunter, cell in zip(hunters, cells):\n        hunter.put_on(cell)\n        hunter.random_size()\n</code></pre>"},{"location":"api/farmer/","title":"farmer","text":""},{"location":"api/farmer/#_1","title":"\u519c\u6c11","text":"<p>             Bases: <code>SiteGroup</code></p> <p>\u519c\u6c11</p> Source code in <code>src/farmer.py</code> <pre><code>class Farmer(SiteGroup):\n    \"\"\"\n    \u519c\u6c11\n    \"\"\"\n\n    def __init__(self, *arg, **kwargs) -&gt; None:\n        super().__init__(*arg, **kwargs)\n        self._area = self.params.area\n        self._growth_rate = self.params.growth_rate\n        self.size = kwargs.get(\"size\", self.min_size)\n\n    @property\n    def growth_rate(self) -&gt; float:\n        \"\"\"\u4eba\u53e3\u589e\u957f\u7387\uff0c\u9ed8\u8ba4\u503c\u53ef\u4ee5\u5728\u914d\u7f6e\u6587\u4ef6\u91cc\u7684`growth_rate`\u4e2d\u8c03\u8282\uff0c\u4e5f\u53ef\u4ee5\u56e0\u590d\u6742\u5316\u800c\u4e0b\u964d\u3002\u8bbe\u7f6e\u65b0\u7684\u4eba\u53e3\u589e\u957f\u7387\u65f6\u4e0d\u80fd\u4e0b\u964d\u5230\u8d1f\u589e\u957f\u3002\"\"\"\n        return getattr(self, \"_growth_rate\", 0.0)\n\n    @growth_rate.setter\n    def growth_rate(self, growth_rate) -&gt; None:\n        \"\"\"\u4eba\u53e3\u589e\u957f\u7387\u53d8\u5316\"\"\"\n        growth_rate = max(growth_rate, 0.0)\n        self._growth_rate = float(growth_rate)\n\n    @property\n    def area(self) -&gt; float:\n        \"\"\"\u8015\u5730\u9762\u79ef\u3002\u5f53\u53d1\u751f\u590d\u6742\u5316\u65f6\uff0c\u7406\u8bba\u4e0a\u8015\u5730\u9762\u79ef\u4f1a\u589e\u52a0\u4e00\u5757\uff082km * 2km\uff09\u7684\u571f\u5730\uff0c\u4f46\u8fd9\u5757\u571f\u5730\u4f1a\u56e0\u4e3a\u590d\u6742\u5316\u800c\u53d8\u7684\u7565\u5c0f\u3002\u8ba1\u7b97\u516c\u5f0f\u4e3a\uff1a\n\n        $area = init_area * (2 - complexity)$\n\n        \u5176\u4e2dcomplexity\u4e3a\u590d\u6742\u5316\u65f6\u7684\u635f\u5931\u7cfb\u6570\uff0c\u5e94\u8be5\u57280-1\u4e4b\u95f4\u3002\n        \"\"\"\n        return getattr(self, \"_area\", 0)\n\n    @area.setter\n    def area(self, area: float) -&gt; None:\n        \"\"\"\u8015\u5730\u9762\u79ef\u53d8\u5316\uff0c\u4f1a\u4e0d\u65ad\u589e\u52a0\"\"\"\n        area = max(self.area, area)\n        self._area = float(area)\n\n    @SiteGroup.size.setter\n    def size(self, size: Number) -&gt; None:\n        \"\"\"\u4eba\u53e3\u89c4\u6a21\u6709\u6700\u5927\u6700\u5c0f\u503c\u9650\u5236\"\"\"\n        SiteGroup.size.fset(self, size)\n        if size &gt; self.max_size:\n            self.complicate()\n\n    @property\n    def max_size(self) -&gt; float:\n        \"\"\"\u6700\u5927\u4eba\u53e3\u6570\u91cf\n\n        Note:\n            \u53c2\u8003\u88f4\u674e\u5c97\u65f6\u671f\uff089000-7000 BP\uff09\uff0c\u4eba\u5747\u8015\u5730\u4e3a0.008\u5e73\u65b9\u516c\u91cc\uff08\u4e54\u7389 2010\uff09\uff0c\n            \u7ed3\u5408\u534e\u5357\u6c14\u5019\u6761\u4ef6\u4e0b\u8f83\u9ad8\u7684\u751f\u4ea7\u529b\u548c\u66f4\u5145\u6c9b\u7684\u81ea\u7136\u8d44\u6e90\uff0c\u5c06\u6240\u9700\u4eba\u5747\u8015\u5730\u8bbe\u7f6e\u4e3a0.004\u5e73\u65b9\u516c\u91cc\uff0c\n            \u90a3\u4e48\u8be5\u5355\u4f4d\u4eba\u53e3\u4e0a\u9650\u5373\u03c0 * 2 * 2 / 0.004=3142\u4eba\u3002\n        \"\"\"\n        max_size = np.pi * self.area**2 / 0.004\n        return np.ceil(max_size)\n\n    def diffuse(\n        self, group_range: Tuple[Number] | None = None, diffuse_prob: Number = None\n    ) -&gt; Self:\n        \"\"\"\u519c\u6c11\u7684\u5206\u6563\u3002\u4e00\u65e6\u968f\u673a\u6570\u5c0f\u4e8e\u5206\u6563\u6982\u7387\uff0c\u5219\u4f1a\u5206\u6563\u51fa\u53bb\u3002\n        \u4f46\u4e0d\u50cf\u72e9\u730e\u91c7\u96c6\u8005\uff0c\u519c\u6c11\u5982\u679c\u5206\u88c2\u4e0d\u51fa\u6700\u5c0f\u7684\u4e00\u652f\u961f\u4f0d\uff0c\u5c31\u4e0d\u4f1a\u6269\u6563\u51fa\u53bb\u3002\n        \u53ef\u4ee5\u5728\u914d\u7f6e\u6587\u4ef6\u91cc`diffuse_prob`\u53c2\u6570\u8c03\u8282\u5206\u6563\u6982\u7387\u3002\n        \"\"\"\n        # \u68c0\u6d4b\u6982\u7387\u662f\u5426\u591f\u4ea7\u751f\u5c0f\u961f\n        if diffuse_prob is None:\n            diffuse_prob = self.params.get(\"diffuse_prob\", 0.0)\n        if self.random.random() &lt; diffuse_prob:\n            return super().diffuse(group_range=group_range)\n        return None\n\n    def complicate(self, complexity: float | None = None) -&gt; Self:\n        \"\"\"\u519c\u6c11\u7684\u590d\u6742\u5316\uff0c\u8015\u5730\u4e0a\u9650\u518d\u589e\u52a0\u8015\u5730\u5bc6\u5ea6\u589e\u52a0\u3001\u4eba\u53e3\u589e\u957f\u7387\u4e0b\u964d\u3002\u4eba\u53e3\u589e\u957f\u7387\u7684\u4e0b\u964d\u6bd4\u4f8b\u4e5f\u4e3a\u590d\u6742\u5316\u7cfb\u6570\u7684\u503c\u3002\"\"\"\n        if complexity is None:\n            complexity = self.params.get(\"complexity\", 0.0)\n        self.growth_rate *= 1 - complexity\n        self.area += self.params.area * (1 - complexity)\n</code></pre>"},{"location":"api/farmer/#src.farmer.Farmer.area","title":"<code>area: float</code>  <code>property</code> <code>writable</code>","text":"<p>\u8015\u5730\u9762\u79ef\u3002\u5f53\u53d1\u751f\u590d\u6742\u5316\u65f6\uff0c\u7406\u8bba\u4e0a\u8015\u5730\u9762\u79ef\u4f1a\u589e\u52a0\u4e00\u5757\uff082km * 2km\uff09\u7684\u571f\u5730\uff0c\u4f46\u8fd9\u5757\u571f\u5730\u4f1a\u56e0\u4e3a\u590d\u6742\u5316\u800c\u53d8\u7684\u7565\u5c0f\u3002\u8ba1\u7b97\u516c\u5f0f\u4e3a\uff1a</p> <p>$area = init_area * (2 - complexity)$</p> <p>\u5176\u4e2dcomplexity\u4e3a\u590d\u6742\u5316\u65f6\u7684\u635f\u5931\u7cfb\u6570\uff0c\u5e94\u8be5\u57280-1\u4e4b\u95f4\u3002</p>"},{"location":"api/farmer/#src.farmer.Farmer.growth_rate","title":"<code>growth_rate: float</code>  <code>property</code> <code>writable</code>","text":"<p>\u4eba\u53e3\u589e\u957f\u7387\uff0c\u9ed8\u8ba4\u503c\u53ef\u4ee5\u5728\u914d\u7f6e\u6587\u4ef6\u91cc\u7684<code>growth_rate</code>\u4e2d\u8c03\u8282\uff0c\u4e5f\u53ef\u4ee5\u56e0\u590d\u6742\u5316\u800c\u4e0b\u964d\u3002\u8bbe\u7f6e\u65b0\u7684\u4eba\u53e3\u589e\u957f\u7387\u65f6\u4e0d\u80fd\u4e0b\u964d\u5230\u8d1f\u589e\u957f\u3002</p>"},{"location":"api/farmer/#src.farmer.Farmer.max_size","title":"<code>max_size: float</code>  <code>property</code>","text":"<p>\u6700\u5927\u4eba\u53e3\u6570\u91cf</p> Note <p>\u53c2\u8003\u88f4\u674e\u5c97\u65f6\u671f\uff089000-7000 BP\uff09\uff0c\u4eba\u5747\u8015\u5730\u4e3a0.008\u5e73\u65b9\u516c\u91cc\uff08\u4e54\u7389 2010\uff09\uff0c \u7ed3\u5408\u534e\u5357\u6c14\u5019\u6761\u4ef6\u4e0b\u8f83\u9ad8\u7684\u751f\u4ea7\u529b\u548c\u66f4\u5145\u6c9b\u7684\u81ea\u7136\u8d44\u6e90\uff0c\u5c06\u6240\u9700\u4eba\u5747\u8015\u5730\u8bbe\u7f6e\u4e3a0.004\u5e73\u65b9\u516c\u91cc\uff0c \u90a3\u4e48\u8be5\u5355\u4f4d\u4eba\u53e3\u4e0a\u9650\u5373\u03c0 * 2 * 2 / 0.004=3142\u4eba\u3002</p>"},{"location":"api/farmer/#src.farmer.Farmer.complicate","title":"<code>complicate(complexity=None)</code>","text":"<p>\u519c\u6c11\u7684\u590d\u6742\u5316\uff0c\u8015\u5730\u4e0a\u9650\u518d\u589e\u52a0\u8015\u5730\u5bc6\u5ea6\u589e\u52a0\u3001\u4eba\u53e3\u589e\u957f\u7387\u4e0b\u964d\u3002\u4eba\u53e3\u589e\u957f\u7387\u7684\u4e0b\u964d\u6bd4\u4f8b\u4e5f\u4e3a\u590d\u6742\u5316\u7cfb\u6570\u7684\u503c\u3002</p> Source code in <code>src/farmer.py</code> <pre><code>def complicate(self, complexity: float | None = None) -&gt; Self:\n    \"\"\"\u519c\u6c11\u7684\u590d\u6742\u5316\uff0c\u8015\u5730\u4e0a\u9650\u518d\u589e\u52a0\u8015\u5730\u5bc6\u5ea6\u589e\u52a0\u3001\u4eba\u53e3\u589e\u957f\u7387\u4e0b\u964d\u3002\u4eba\u53e3\u589e\u957f\u7387\u7684\u4e0b\u964d\u6bd4\u4f8b\u4e5f\u4e3a\u590d\u6742\u5316\u7cfb\u6570\u7684\u503c\u3002\"\"\"\n    if complexity is None:\n        complexity = self.params.get(\"complexity\", 0.0)\n    self.growth_rate *= 1 - complexity\n    self.area += self.params.area * (1 - complexity)\n</code></pre>"},{"location":"api/farmer/#src.farmer.Farmer.diffuse","title":"<code>diffuse(group_range=None, diffuse_prob=None)</code>","text":"<p>\u519c\u6c11\u7684\u5206\u6563\u3002\u4e00\u65e6\u968f\u673a\u6570\u5c0f\u4e8e\u5206\u6563\u6982\u7387\uff0c\u5219\u4f1a\u5206\u6563\u51fa\u53bb\u3002 \u4f46\u4e0d\u50cf\u72e9\u730e\u91c7\u96c6\u8005\uff0c\u519c\u6c11\u5982\u679c\u5206\u88c2\u4e0d\u51fa\u6700\u5c0f\u7684\u4e00\u652f\u961f\u4f0d\uff0c\u5c31\u4e0d\u4f1a\u6269\u6563\u51fa\u53bb\u3002 \u53ef\u4ee5\u5728\u914d\u7f6e\u6587\u4ef6\u91cc<code>diffuse_prob</code>\u53c2\u6570\u8c03\u8282\u5206\u6563\u6982\u7387\u3002</p> Source code in <code>src/farmer.py</code> <pre><code>def diffuse(\n    self, group_range: Tuple[Number] | None = None, diffuse_prob: Number = None\n) -&gt; Self:\n    \"\"\"\u519c\u6c11\u7684\u5206\u6563\u3002\u4e00\u65e6\u968f\u673a\u6570\u5c0f\u4e8e\u5206\u6563\u6982\u7387\uff0c\u5219\u4f1a\u5206\u6563\u51fa\u53bb\u3002\n    \u4f46\u4e0d\u50cf\u72e9\u730e\u91c7\u96c6\u8005\uff0c\u519c\u6c11\u5982\u679c\u5206\u88c2\u4e0d\u51fa\u6700\u5c0f\u7684\u4e00\u652f\u961f\u4f0d\uff0c\u5c31\u4e0d\u4f1a\u6269\u6563\u51fa\u53bb\u3002\n    \u53ef\u4ee5\u5728\u914d\u7f6e\u6587\u4ef6\u91cc`diffuse_prob`\u53c2\u6570\u8c03\u8282\u5206\u6563\u6982\u7387\u3002\n    \"\"\"\n    # \u68c0\u6d4b\u6982\u7387\u662f\u5426\u591f\u4ea7\u751f\u5c0f\u961f\n    if diffuse_prob is None:\n        diffuse_prob = self.params.get(\"diffuse_prob\", 0.0)\n    if self.random.random() &lt; diffuse_prob:\n        return super().diffuse(group_range=group_range)\n    return None\n</code></pre>"},{"location":"api/farmer/#src.farmer.Farmer.size","title":"<code>size(size)</code>","text":"<p>\u4eba\u53e3\u89c4\u6a21\u6709\u6700\u5927\u6700\u5c0f\u503c\u9650\u5236</p> Source code in <code>src/farmer.py</code> <pre><code>@SiteGroup.size.setter\ndef size(self, size: Number) -&gt; None:\n    \"\"\"\u4eba\u53e3\u89c4\u6a21\u6709\u6700\u5927\u6700\u5c0f\u503c\u9650\u5236\"\"\"\n    SiteGroup.size.fset(self, size)\n    if size &gt; self.max_size:\n        self.complicate()\n</code></pre>"},{"location":"api/hunter/","title":"hunter","text":""},{"location":"api/hunter/#_1","title":"\u72e9\u730e\u91c7\u96c6\u8005","text":"<p>             Bases: <code>SiteGroup</code></p> <p>\u72e9\u730e\u91c7\u96c6\u8005</p> Source code in <code>src/hunter.py</code> <pre><code>class Hunter(SiteGroup):\n    \"\"\"\u72e9\u730e\u91c7\u96c6\u8005\"\"\"\n\n    @property\n    def max_size(self) -&gt; int:\n        if not self.on_earth:\n            return 100_000_000\n        return np.ceil(self.loc(\"lim_h\"))\n\n    @property\n    def is_complex(self) -&gt; bool:\n        \"\"\"\u8d85\u8fc7\u5b9a\u5c45\u89c4\u6a21\u7684\u9608\u503c\uff0c\u4f1a\u53d8\u6210\u590d\u6742\u72e9\u730e\u91c7\u96c6\u8005\u3002\u53c2\u6570\u914d\u7f6e\u6587\u4ef6\u91cc\u7684`settle_size`\u53ef\u4ee5\u8c03\u8282\u8be5\u9608\u503c\u3002\n\n        returns:\n            \u662f\u5426\u662f\u590d\u6742\u72e9\u730e\u91c7\u96c6\u8005\n        \"\"\"\n        if not self.on_earth:\n            return False\n        return self.size &gt; self.params.is_complex\n\n    def put_on(self, cell: PatchCell | None = None) -&gt; None:\n        \"\"\"\u5c06\u72e9\u730e\u91c7\u96c6\u8005\u653e\u5230\u67d0\u4e2a\u683c\u5b50\u3002\u72e9\u730e\u91c7\u96c6\u8005\u653e\u5230\u7684\u683c\u5b50\u5982\u679c\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a\u4e3b\u4f53\uff0c\u5c31\u4f1a\u4e0e\u4ed6\u7ade\u4e89\uff08\u89e6\u53d1\u7ade\u4e89\u65b9\u6cd5\uff09\u3002\n\n        Args:\n            cell (PatchCell | None): \u72e9\u730e\u91c7\u96c6\u8005\u653e\u5230\u7684\u683c\u5b50\u3002\n        \"\"\"\n        # \u5982\u679c\u6ca1\u6709\u76ee\u6807\u683c\u5b50\uff08\u6b7b\u4ea1\uff09\n        if cell is None:\n            super().put_on()\n            return\n        existing_agent = cell.agents[0] if cell.has_agent() else None\n        super().put_on(cell)\n        if existing_agent:\n            self.compete(existing_agent)\n        # # \u6bcf\u5230\u4e00\u4e2a\u683c\u5b50\uff0c\u91cd\u65b0\u8bbe\u7f6e\u5927\u5c0f\uff0c\u56e0\u4e3a\u4eba\u53e3\u4e0a\u9650\u53d1\u751f\u6539\u53d8\n        # self.size = self.size\n\n    def diffuse(self, group_range: Tuple[Number] | None = None) -&gt; Self:\n        \"\"\"\u5982\u679c\u4eba\u53e3\u5927\u4e8e\u4e00\u5b9a\u89c4\u6a21\uff0c\u72e9\u730e\u91c7\u96c6\u8005\u5206\u6563\u51fa\u53bb\n\n        Args:\n            force (bool): \u662f\u5426\u5f3a\u5236\u89e6\u53d1\u8be5\u65b9\u6cd5\n\n        returns:\n            \u5206\u6563\u540e\u7684\u7ed3\u679c\u3002\n            - \u5982\u679c\u6210\u529f\u5206\u6563\uff0c\u8fd4\u56de\u5206\u6563\u51fa\u7684\u65b0\u4e3b\u4f53\u3002\n            - \u5f53\u65e0\u6cd5\u6210\u529f\u5206\u6563\u65f6\uff0c\u8fd4\u56de\u7a7a\u503c\u3002\n        \"\"\"\n        if self.size &gt;= self.max_size:\n            return super().diffuse(group_range=group_range)\n\n    def convert(\n        self, convert_prob: float | None = None, radius: int = 1, moore: bool = False\n    ) -&gt; Self:\n        \"\"\"\u72e9\u730e\u91c7\u96c6\u8005\u53ef\u80fd\u8f6c\u5316\u4e3a\u519c\u6c11\uff0c\u9700\u8981\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff1a\n        1. \u5468\u56f4\u6709\u519c\u6c11\n        2. \u76ee\u524d\u7684\u571f\u5730\u662f\u53ef\u8015\u5730\n\n        Args:\n            radius (int): \u641c\u7d22\u7684\u534a\u5f84\u8303\u56f4\uff0c\u9ed8\u8ba4\u4e3a\u5468\u56f4\u4e00\u683c\u3002\n            moore (bool): \u662f\u5426\u4f7f\u7528Moore\u90bb\u57df\u8fdb\u884c\u641c\u7d22\uff0c\n            \u5373\u641c\u7d228\u4e34\u57df\uff0c\u5305\u62ec\u5bf9\u89d2\u7ebf\u7684\u56db\u4e2a\u683c\u5b50\u3002\n            \u9ed8\u8ba4\u4e0d\u542f\u7528\uff08\u5373\u4ec5\u8ba1\u7b97\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u683c\u5b50\uff09\u3002\n\n        returns:\n            \u5982\u679c\u6ca1\u6709\u8f6c\u5316\uff0c\u8fd4\u56de\u81ea\u8eab\u3002\n            \u5982\u679c\u6210\u529f\u8f6c\u5316\uff0c\u8fd4\u56de\u8f6c\u5316\u540e\u7684\u4e3b\u4f53\u3002\n        \"\"\"\n        # \u5468\u56f4\u6709\u519c\u6c11\n        cells = self._cell.get_neighboring_cells(radius=radius, moore=moore)\n        cond1 = any(cells.trigger(\"has_agent\", breed=\"Farmer\"))\n        # \u4e14\u76ee\u524d\u7684\u571f\u5730\u662f\u53ef\u8015\u5730\n        cond2 = self._cell.is_arable\n        # \u540c\u65f6\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\uff0c\u72e9\u730e\u91c7\u96c6\u8005\u8f6c\u5316\u4e3a\u519c\u6c11\n        return super().convert(convert_prob) if cond1 and cond2 else self\n\n    def move(self, radius: int = 1) -&gt; None:\n        \"\"\"\u6709\u79fb\u52a8\u80fd\u529b\u624d\u80fd\u79fb\u52a8\uff0c\u5728\u5468\u56f4\u968f\u673a\u9009\u53d6\u4e00\u4e2a\u683c\u5b50\u79fb\u52a8\u3002\n\n        Note:\n            *\u5173\u4e8e\u79fb\u52a8\u529b\u5927\u5c0f\u7684\u8ba8\u8bba\u5c3a\u5ea6\u90fd\u592a\u5c0f\uff0c\u6216\u8bb8\u53ef\u4ee5\u7b80\u5316\u4e3a1\u6b21\u79fb\u52a81\u683c\u3002\n            \u628a\u5dee\u5f02\u843d\u5728\u72e9\u730e\u91c7\u96c6\u8005\u662f\u5426\u5b9a\u5c45\uff0c\u5373\u4e27\u5931\u79fb\u52a8\u529b\u3002\n            \u540e\u8005\u53ef\u5927\u81f4\u8bbe\u5b9a\u4e3asize_h\u5927\u4e8e100\uff08Kelly 2013: 171\uff09\u3002*\n\n        Args:\n            radius (int): \u641c\u7d22\u7684\u534a\u5f84\u8303\u56f4\uff0c\u5728\u5468\u56f4\u4e00\u683c\n\n        returns:\n            \u5982\u679c\u6210\u529f\u79fb\u52a8\uff0c\u8fd4\u56de `True`\uff0c\u5426\u5219\u8fd4\u56de `False`\u3002\n        \"\"\"\n        # self._check_moves()\n        if not self.is_complex and self.on_earth:\n            if cell := search_a_new_place(self, self._cell, radius=radius):\n                self.put_on(cell)\n                return True\n        return False\n\n    def _loss_competition(self, loser: SiteGroup):\n        \"\"\"\u5931\u8d25\u8005\"\"\"\n        loss = self.model.params.loss_rate\n        if loser.breed == \"Farmer\":\n            loser.die()\n        elif loser.breed == \"Hunter\":\n            if loser.is_complex:\n                loser.die()\n            else:\n                loser.size *= loss\n                # \u5982\u679c\u635f\u5931\u4eba\u53e3\u4e4b\u540e\u8fd8\u5728\u4e16\u754c\u4e0a\uff0c\u5c31\u6e9c\u4e86\n                if loser.on_earth:\n                    loser.move()\n        else:\n            raise TypeError(\"Agent must be Farmer or Hunter.\")\n\n    def _compete_with_hunter(self, hunter: Self) -&gt; bool:\n        \"\"\"\u4e0e\u5176\u5b83\u72e9\u730e\u91c7\u96c6\u8005\u7ade\u4e89\"\"\"\n        if self.size &gt;= hunter.size:\n            self._loss_competition(hunter)\n            return True\n        self._loss_competition(self)\n        return False\n\n    def _compete_with_farmer(self, farmer: Farmer) -&gt; bool:\n        \"\"\"\u4e0e\u5176\u5b83\u519c\u6c11\u7ade\u4e89\"\"\"\n        power = self.size * self.params.intensified_coefficient\n        if power &gt;= farmer.size:\n            self._loss_competition(farmer)\n            return True\n        self._loss_competition(self)\n        return False\n\n    def compete(self, other: SiteGroup) -&gt; bool:\n        \"\"\"\u4e0e\u5176\u5b83\u4e3b\u4f53\u7ade\u4e89\uff0c\u6839\u636e\u7ade\u4e89\u5bf9\u8c61\u6709\u7740\u4e0d\u540c\u7684\u7ade\u4e89\u89c4\u5219\uff1a\n        1. \u4e0e\u72e9\u730e\u91c7\u96c6\u8005\u7ade\u4e89\u65f6\uff0c\u6bd4\u8f83\u4e24\u8005\u7684\u4eba\u53e3\u89c4\u6a21\u3002\u8f93\u4e86\u7684\u4e00\u65b9\u5c06\u4eba\u53e3\u51cf\u534a\u5e76\u8fdb\u884c\u4e00\u6b21\u79fb\u52a8\u3002\n        2. \u4e0e\u519c\u6c11\u7ade\u4e89\u65f6\uff0c\u72e9\u730e\u91c7\u96c6\u8005\u4f1a\u5177\u5907\u4e00\u5b9a\u5f3a\u5316\u7cfb\u6570\uff0c\u901a\u8fc7\u914d\u7f6e\u6587\u4ef6\u91cc\u7684 `intensified_coefficient` \u53c2\u6570\u8fdb\u884c\u8c03\u8282\u3002\n        \u8f93\u4e86\u7684\u4e00\u65b9\u5982\u679c\u662f\u519c\u6c11\uff0c\u5219\u76f4\u63a5\u88ab\u72e9\u730e\u91c7\u96c6\u8005\u6d88\u706d\uff1b\n        \u5982\u679c\u662f\u72e9\u730e\u91c7\u96c6\u8005\uff0c\u5219\u5c06\u4eba\u53e3\u51cf\u534a\u5e76\u8fdb\u884c\u4e00\u6b21\u79fb\u52a8\u3002\n\n        Args:\n            other: \u4e0e\u8be5\u4e3b\u4f53\u7ade\u4e89\u7684\u53e6\u4e00\u4e2a\u4e3b\u4f53\u3002\n\n        returns:\n            \u7ade\u4e89\u6210\u529f\u5219\u8fd4\u56de `True`\uff0c\u5426\u5219\u8fd4\u56de `False`\u3002\n        \"\"\"\n        if other.breed == \"Farmer\":\n            return self._compete_with_farmer(other)\n        if other.breed == \"Hunter\":\n            return self._compete_with_hunter(other)\n        raise TypeError(\"Agent must be Farmer or Hunter.\")\n</code></pre>"},{"location":"api/hunter/#src.hunter.Hunter.is_complex","title":"<code>is_complex: bool</code>  <code>property</code>","text":"<p>\u8d85\u8fc7\u5b9a\u5c45\u89c4\u6a21\u7684\u9608\u503c\uff0c\u4f1a\u53d8\u6210\u590d\u6742\u72e9\u730e\u91c7\u96c6\u8005\u3002\u53c2\u6570\u914d\u7f6e\u6587\u4ef6\u91cc\u7684<code>settle_size</code>\u53ef\u4ee5\u8c03\u8282\u8be5\u9608\u503c\u3002</p> <p>Returns:</p> Type Description <code>bool</code> <p>\u662f\u5426\u662f\u590d\u6742\u72e9\u730e\u91c7\u96c6\u8005</p>"},{"location":"api/hunter/#src.hunter.Hunter.compete","title":"<code>compete(other)</code>","text":"<p>\u4e0e\u5176\u5b83\u4e3b\u4f53\u7ade\u4e89\uff0c\u6839\u636e\u7ade\u4e89\u5bf9\u8c61\u6709\u7740\u4e0d\u540c\u7684\u7ade\u4e89\u89c4\u5219\uff1a 1. \u4e0e\u72e9\u730e\u91c7\u96c6\u8005\u7ade\u4e89\u65f6\uff0c\u6bd4\u8f83\u4e24\u8005\u7684\u4eba\u53e3\u89c4\u6a21\u3002\u8f93\u4e86\u7684\u4e00\u65b9\u5c06\u4eba\u53e3\u51cf\u534a\u5e76\u8fdb\u884c\u4e00\u6b21\u79fb\u52a8\u3002 2. \u4e0e\u519c\u6c11\u7ade\u4e89\u65f6\uff0c\u72e9\u730e\u91c7\u96c6\u8005\u4f1a\u5177\u5907\u4e00\u5b9a\u5f3a\u5316\u7cfb\u6570\uff0c\u901a\u8fc7\u914d\u7f6e\u6587\u4ef6\u91cc\u7684 <code>intensified_coefficient</code> \u53c2\u6570\u8fdb\u884c\u8c03\u8282\u3002 \u8f93\u4e86\u7684\u4e00\u65b9\u5982\u679c\u662f\u519c\u6c11\uff0c\u5219\u76f4\u63a5\u88ab\u72e9\u730e\u91c7\u96c6\u8005\u6d88\u706d\uff1b \u5982\u679c\u662f\u72e9\u730e\u91c7\u96c6\u8005\uff0c\u5219\u5c06\u4eba\u53e3\u51cf\u534a\u5e76\u8fdb\u884c\u4e00\u6b21\u79fb\u52a8\u3002</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>SiteGroup</code> <p>\u4e0e\u8be5\u4e3b\u4f53\u7ade\u4e89\u7684\u53e6\u4e00\u4e2a\u4e3b\u4f53\u3002</p> required <p>Returns:</p> Type Description <code>bool</code> <p>\u7ade\u4e89\u6210\u529f\u5219\u8fd4\u56de <code>True</code>\uff0c\u5426\u5219\u8fd4\u56de <code>False</code>\u3002</p> Source code in <code>src/hunter.py</code> <pre><code>def compete(self, other: SiteGroup) -&gt; bool:\n    \"\"\"\u4e0e\u5176\u5b83\u4e3b\u4f53\u7ade\u4e89\uff0c\u6839\u636e\u7ade\u4e89\u5bf9\u8c61\u6709\u7740\u4e0d\u540c\u7684\u7ade\u4e89\u89c4\u5219\uff1a\n    1. \u4e0e\u72e9\u730e\u91c7\u96c6\u8005\u7ade\u4e89\u65f6\uff0c\u6bd4\u8f83\u4e24\u8005\u7684\u4eba\u53e3\u89c4\u6a21\u3002\u8f93\u4e86\u7684\u4e00\u65b9\u5c06\u4eba\u53e3\u51cf\u534a\u5e76\u8fdb\u884c\u4e00\u6b21\u79fb\u52a8\u3002\n    2. \u4e0e\u519c\u6c11\u7ade\u4e89\u65f6\uff0c\u72e9\u730e\u91c7\u96c6\u8005\u4f1a\u5177\u5907\u4e00\u5b9a\u5f3a\u5316\u7cfb\u6570\uff0c\u901a\u8fc7\u914d\u7f6e\u6587\u4ef6\u91cc\u7684 `intensified_coefficient` \u53c2\u6570\u8fdb\u884c\u8c03\u8282\u3002\n    \u8f93\u4e86\u7684\u4e00\u65b9\u5982\u679c\u662f\u519c\u6c11\uff0c\u5219\u76f4\u63a5\u88ab\u72e9\u730e\u91c7\u96c6\u8005\u6d88\u706d\uff1b\n    \u5982\u679c\u662f\u72e9\u730e\u91c7\u96c6\u8005\uff0c\u5219\u5c06\u4eba\u53e3\u51cf\u534a\u5e76\u8fdb\u884c\u4e00\u6b21\u79fb\u52a8\u3002\n\n    Args:\n        other: \u4e0e\u8be5\u4e3b\u4f53\u7ade\u4e89\u7684\u53e6\u4e00\u4e2a\u4e3b\u4f53\u3002\n\n    returns:\n        \u7ade\u4e89\u6210\u529f\u5219\u8fd4\u56de `True`\uff0c\u5426\u5219\u8fd4\u56de `False`\u3002\n    \"\"\"\n    if other.breed == \"Farmer\":\n        return self._compete_with_farmer(other)\n    if other.breed == \"Hunter\":\n        return self._compete_with_hunter(other)\n    raise TypeError(\"Agent must be Farmer or Hunter.\")\n</code></pre>"},{"location":"api/hunter/#src.hunter.Hunter.convert","title":"<code>convert(convert_prob=None, radius=1, moore=False)</code>","text":"<p>\u72e9\u730e\u91c7\u96c6\u8005\u53ef\u80fd\u8f6c\u5316\u4e3a\u519c\u6c11\uff0c\u9700\u8981\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff1a 1. \u5468\u56f4\u6709\u519c\u6c11 2. \u76ee\u524d\u7684\u571f\u5730\u662f\u53ef\u8015\u5730</p> <p>Parameters:</p> Name Type Description Default <code>radius</code> <code>int</code> <p>\u641c\u7d22\u7684\u534a\u5f84\u8303\u56f4\uff0c\u9ed8\u8ba4\u4e3a\u5468\u56f4\u4e00\u683c\u3002</p> <code>1</code> <code>moore</code> <code>bool</code> <p>\u662f\u5426\u4f7f\u7528Moore\u90bb\u57df\u8fdb\u884c\u641c\u7d22\uff0c</p> <code>False</code> <p>Returns:</p> Type Description <code>Self</code> <p>\u5982\u679c\u6ca1\u6709\u8f6c\u5316\uff0c\u8fd4\u56de\u81ea\u8eab\u3002</p> <code>Self</code> <p>\u5982\u679c\u6210\u529f\u8f6c\u5316\uff0c\u8fd4\u56de\u8f6c\u5316\u540e\u7684\u4e3b\u4f53\u3002</p> Source code in <code>src/hunter.py</code> <pre><code>def convert(\n    self, convert_prob: float | None = None, radius: int = 1, moore: bool = False\n) -&gt; Self:\n    \"\"\"\u72e9\u730e\u91c7\u96c6\u8005\u53ef\u80fd\u8f6c\u5316\u4e3a\u519c\u6c11\uff0c\u9700\u8981\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff1a\n    1. \u5468\u56f4\u6709\u519c\u6c11\n    2. \u76ee\u524d\u7684\u571f\u5730\u662f\u53ef\u8015\u5730\n\n    Args:\n        radius (int): \u641c\u7d22\u7684\u534a\u5f84\u8303\u56f4\uff0c\u9ed8\u8ba4\u4e3a\u5468\u56f4\u4e00\u683c\u3002\n        moore (bool): \u662f\u5426\u4f7f\u7528Moore\u90bb\u57df\u8fdb\u884c\u641c\u7d22\uff0c\n        \u5373\u641c\u7d228\u4e34\u57df\uff0c\u5305\u62ec\u5bf9\u89d2\u7ebf\u7684\u56db\u4e2a\u683c\u5b50\u3002\n        \u9ed8\u8ba4\u4e0d\u542f\u7528\uff08\u5373\u4ec5\u8ba1\u7b97\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u683c\u5b50\uff09\u3002\n\n    returns:\n        \u5982\u679c\u6ca1\u6709\u8f6c\u5316\uff0c\u8fd4\u56de\u81ea\u8eab\u3002\n        \u5982\u679c\u6210\u529f\u8f6c\u5316\uff0c\u8fd4\u56de\u8f6c\u5316\u540e\u7684\u4e3b\u4f53\u3002\n    \"\"\"\n    # \u5468\u56f4\u6709\u519c\u6c11\n    cells = self._cell.get_neighboring_cells(radius=radius, moore=moore)\n    cond1 = any(cells.trigger(\"has_agent\", breed=\"Farmer\"))\n    # \u4e14\u76ee\u524d\u7684\u571f\u5730\u662f\u53ef\u8015\u5730\n    cond2 = self._cell.is_arable\n    # \u540c\u65f6\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\uff0c\u72e9\u730e\u91c7\u96c6\u8005\u8f6c\u5316\u4e3a\u519c\u6c11\n    return super().convert(convert_prob) if cond1 and cond2 else self\n</code></pre>"},{"location":"api/hunter/#src.hunter.Hunter.diffuse","title":"<code>diffuse(group_range=None)</code>","text":"<p>\u5982\u679c\u4eba\u53e3\u5927\u4e8e\u4e00\u5b9a\u89c4\u6a21\uff0c\u72e9\u730e\u91c7\u96c6\u8005\u5206\u6563\u51fa\u53bb</p> <p>Parameters:</p> Name Type Description Default <code>force</code> <code>bool</code> <p>\u662f\u5426\u5f3a\u5236\u89e6\u53d1\u8be5\u65b9\u6cd5</p> required <p>Returns:</p> Type Description <code>Self</code> <p>\u5206\u6563\u540e\u7684\u7ed3\u679c\u3002</p> <code>Self</code> <ul> <li>\u5982\u679c\u6210\u529f\u5206\u6563\uff0c\u8fd4\u56de\u5206\u6563\u51fa\u7684\u65b0\u4e3b\u4f53\u3002</li> </ul> <code>Self</code> <ul> <li>\u5f53\u65e0\u6cd5\u6210\u529f\u5206\u6563\u65f6\uff0c\u8fd4\u56de\u7a7a\u503c\u3002</li> </ul> Source code in <code>src/hunter.py</code> <pre><code>def diffuse(self, group_range: Tuple[Number] | None = None) -&gt; Self:\n    \"\"\"\u5982\u679c\u4eba\u53e3\u5927\u4e8e\u4e00\u5b9a\u89c4\u6a21\uff0c\u72e9\u730e\u91c7\u96c6\u8005\u5206\u6563\u51fa\u53bb\n\n    Args:\n        force (bool): \u662f\u5426\u5f3a\u5236\u89e6\u53d1\u8be5\u65b9\u6cd5\n\n    returns:\n        \u5206\u6563\u540e\u7684\u7ed3\u679c\u3002\n        - \u5982\u679c\u6210\u529f\u5206\u6563\uff0c\u8fd4\u56de\u5206\u6563\u51fa\u7684\u65b0\u4e3b\u4f53\u3002\n        - \u5f53\u65e0\u6cd5\u6210\u529f\u5206\u6563\u65f6\uff0c\u8fd4\u56de\u7a7a\u503c\u3002\n    \"\"\"\n    if self.size &gt;= self.max_size:\n        return super().diffuse(group_range=group_range)\n</code></pre>"},{"location":"api/hunter/#src.hunter.Hunter.move","title":"<code>move(radius=1)</code>","text":"<p>\u6709\u79fb\u52a8\u80fd\u529b\u624d\u80fd\u79fb\u52a8\uff0c\u5728\u5468\u56f4\u968f\u673a\u9009\u53d6\u4e00\u4e2a\u683c\u5b50\u79fb\u52a8\u3002</p> Note <p>\u5173\u4e8e\u79fb\u52a8\u529b\u5927\u5c0f\u7684\u8ba8\u8bba\u5c3a\u5ea6\u90fd\u592a\u5c0f\uff0c\u6216\u8bb8\u53ef\u4ee5\u7b80\u5316\u4e3a1\u6b21\u79fb\u52a81\u683c\u3002 \u628a\u5dee\u5f02\u843d\u5728\u72e9\u730e\u91c7\u96c6\u8005\u662f\u5426\u5b9a\u5c45\uff0c\u5373\u4e27\u5931\u79fb\u52a8\u529b\u3002 \u540e\u8005\u53ef\u5927\u81f4\u8bbe\u5b9a\u4e3asize_h\u5927\u4e8e100\uff08Kelly 2013: 171\uff09\u3002</p> <p>Parameters:</p> Name Type Description Default <code>radius</code> <code>int</code> <p>\u641c\u7d22\u7684\u534a\u5f84\u8303\u56f4\uff0c\u5728\u5468\u56f4\u4e00\u683c</p> <code>1</code> <p>Returns:</p> Type Description <code>None</code> <p>\u5982\u679c\u6210\u529f\u79fb\u52a8\uff0c\u8fd4\u56de <code>True</code>\uff0c\u5426\u5219\u8fd4\u56de <code>False</code>\u3002</p> Source code in <code>src/hunter.py</code> <pre><code>def move(self, radius: int = 1) -&gt; None:\n    \"\"\"\u6709\u79fb\u52a8\u80fd\u529b\u624d\u80fd\u79fb\u52a8\uff0c\u5728\u5468\u56f4\u968f\u673a\u9009\u53d6\u4e00\u4e2a\u683c\u5b50\u79fb\u52a8\u3002\n\n    Note:\n        *\u5173\u4e8e\u79fb\u52a8\u529b\u5927\u5c0f\u7684\u8ba8\u8bba\u5c3a\u5ea6\u90fd\u592a\u5c0f\uff0c\u6216\u8bb8\u53ef\u4ee5\u7b80\u5316\u4e3a1\u6b21\u79fb\u52a81\u683c\u3002\n        \u628a\u5dee\u5f02\u843d\u5728\u72e9\u730e\u91c7\u96c6\u8005\u662f\u5426\u5b9a\u5c45\uff0c\u5373\u4e27\u5931\u79fb\u52a8\u529b\u3002\n        \u540e\u8005\u53ef\u5927\u81f4\u8bbe\u5b9a\u4e3asize_h\u5927\u4e8e100\uff08Kelly 2013: 171\uff09\u3002*\n\n    Args:\n        radius (int): \u641c\u7d22\u7684\u534a\u5f84\u8303\u56f4\uff0c\u5728\u5468\u56f4\u4e00\u683c\n\n    returns:\n        \u5982\u679c\u6210\u529f\u79fb\u52a8\uff0c\u8fd4\u56de `True`\uff0c\u5426\u5219\u8fd4\u56de `False`\u3002\n    \"\"\"\n    # self._check_moves()\n    if not self.is_complex and self.on_earth:\n        if cell := search_a_new_place(self, self._cell, radius=radius):\n            self.put_on(cell)\n            return True\n    return False\n</code></pre>"},{"location":"api/hunter/#src.hunter.Hunter.put_on","title":"<code>put_on(cell=None)</code>","text":"<p>\u5c06\u72e9\u730e\u91c7\u96c6\u8005\u653e\u5230\u67d0\u4e2a\u683c\u5b50\u3002\u72e9\u730e\u91c7\u96c6\u8005\u653e\u5230\u7684\u683c\u5b50\u5982\u679c\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a\u4e3b\u4f53\uff0c\u5c31\u4f1a\u4e0e\u4ed6\u7ade\u4e89\uff08\u89e6\u53d1\u7ade\u4e89\u65b9\u6cd5\uff09\u3002</p> <p>Parameters:</p> Name Type Description Default <code>cell</code> <code>PatchCell | None</code> <p>\u72e9\u730e\u91c7\u96c6\u8005\u653e\u5230\u7684\u683c\u5b50\u3002</p> <code>None</code> Source code in <code>src/hunter.py</code> <pre><code>def put_on(self, cell: PatchCell | None = None) -&gt; None:\n    \"\"\"\u5c06\u72e9\u730e\u91c7\u96c6\u8005\u653e\u5230\u67d0\u4e2a\u683c\u5b50\u3002\u72e9\u730e\u91c7\u96c6\u8005\u653e\u5230\u7684\u683c\u5b50\u5982\u679c\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a\u4e3b\u4f53\uff0c\u5c31\u4f1a\u4e0e\u4ed6\u7ade\u4e89\uff08\u89e6\u53d1\u7ade\u4e89\u65b9\u6cd5\uff09\u3002\n\n    Args:\n        cell (PatchCell | None): \u72e9\u730e\u91c7\u96c6\u8005\u653e\u5230\u7684\u683c\u5b50\u3002\n    \"\"\"\n    # \u5982\u679c\u6ca1\u6709\u76ee\u6807\u683c\u5b50\uff08\u6b7b\u4ea1\uff09\n    if cell is None:\n        super().put_on()\n        return\n    existing_agent = cell.agents[0] if cell.has_agent() else None\n    super().put_on(cell)\n    if existing_agent:\n        self.compete(existing_agent)\n</code></pre>"},{"location":"api/model/","title":"index","text":"<p>\u6a21\u578b\u6309\u7167\u4ee5\u4e0b\u5de5\u4f5c\u6d41\u8fdb\u884c\u6a21\u62df\u3002</p> <p></p> <p>             Bases: <code>MainModel</code></p> <p>\u8fd0\u884c\u7684\u6a21\u578b</p> Source code in <code>src/model.py</code> <pre><code>class Model(MainModel):\n    \"\"\"\u8fd0\u884c\u7684\u6a21\u578b\"\"\"\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, nature_class=Env, **kwargs)\n        self.nature.add_hunters()\n        self.farmers_num = []\n        self.new_farmers = []\n        self.hunters_num = []\n\n    @property\n    def farmers(self) -&gt; ActorsList:\n        \"\"\"\u519c\u6c11\u5217\u8868\"\"\"\n        return self.agents.select(\"Farmer\")\n\n    @property\n    def hunters(self) -&gt; ActorsList:\n        \"\"\"\u72e9\u730e\u91c7\u96c6\u8005\u5217\u8868\"\"\"\n        return self.agents.select(\"Hunter\")\n\n    def trigger(self, actors: ActorsList, func: str, *args, **kwargs) -&gt; None:\n        \"\"\"\u89e6\u53d1\u6240\u6709\u8fd8\u6d3b\u7740\u7684\u4e3b\u4f53\u7684\u884c\u52a8\"\"\"\n        for actor in actors:\n            if not actor.on_earth:\n                continue\n            getattr(actor, func)(*args, **kwargs)\n\n    def step(self):\n        \"\"\"\u6bcf\u4e00\u65f6\u95f4\u6b65\u90fd\u6309\u7167\u4ee5\u4e0b\u987a\u5e8f\u6267\u884c\u4e00\u6b21\uff1a\n        1. \u66f4\u65b0\u519c\u6c11\u6570\u91cf\n        2. \u6240\u6709\u4e3b\u4f53\u4e92\u76f8\u8f6c\u5316\n        3. \u66f4\u65b0\u72e9\u730e\u91c7\u96c6\u8005\u53ef\u4ee5\u79fb\u52a8\uff08\u8fd9\u53ef\u80fd\u89e6\u53d1\u7ade\u4e89\uff09\n        \"\"\"\n        farmers = self.nature.add_farmers()\n        self.trigger(self.actors, \"population_growth\")\n        self.trigger(self.actors, \"convert\")\n        self.trigger(self.actors, \"diffuse\")\n        self.trigger(self.hunters, \"move\")\n        # \u66f4\u65b0\u519c\u6c11\u548c\u72e9\u730e\u91c7\u96c6\u8005\u6570\u91cf\n        self.new_farmers.append(len(farmers))\n        self.farmers_num.append(self.farmers.array(\"size\").sum())\n        self.hunters_num.append(self.hunters.array(\"size\").sum())\n\n    def end(self):\n        \"\"\"\u6a21\u578b\u8fd0\u884c\u7ed3\u675f\u540e\uff0c\u5c06\u81ea\u52a8\u7ed8\u5236\u72e9\u730e\u91c7\u96c6\u8005\u548c\u519c\u6c11\u7684\u6570\u91cf\u53d8\u5316\"\"\"\n        self.plot()\n        plt.show()\n\n    def plot(self):\n        \"\"\"\u7ed8\u5236\u72e9\u730e\u91c7\u96c6\u8005\u548c\u519c\u6c11\u7684\u6570\u91cf\u53d8\u5316\"\"\"\n        _, ax = plt.subplots()\n        ax.plot(self.farmers_num, label=\"farmers\")\n        ax.plot(self.hunters_num, label=\"hunters\")\n        ax.set_xlabel(\"time\")\n        ax.set_ylabel(\"population\")\n        ax.legend()\n\n    def heatmap(self):\n        \"\"\"\u7ed8\u5236\u72e9\u730e\u91c7\u96c6\u8005\u548c\u519c\u6c11\u7684\u7a7a\u95f4\u5206\u5e03\"\"\"\n        _, (ax1, ax2) = plt.subplots(1, 2, figsize=(8, 3))\n        mask = self.nature.dem.get_xarray(\"elevation\") &gt;= 0\n        farmers = self.nature.dem.get_xarray(\"farmers\").where(mask)\n        hunters = self.nature.dem.get_xarray(\"hunters\").where(mask)\n        farmers.plot.contourf(ax=ax1, cmap=\"Reds\")\n        hunters.plot.contourf(ax=ax2, cmap=\"Greens\")\n        ax1.set_xlabel(\"Farmers\")\n        ax2.set_xlabel(\"Hunters\")\n</code></pre>"},{"location":"api/model/#src.model.Model.farmers","title":"<code>farmers: ActorsList</code>  <code>property</code>","text":"<p>\u519c\u6c11\u5217\u8868</p>"},{"location":"api/model/#src.model.Model.hunters","title":"<code>hunters: ActorsList</code>  <code>property</code>","text":"<p>\u72e9\u730e\u91c7\u96c6\u8005\u5217\u8868</p>"},{"location":"api/model/#src.model.Model.end","title":"<code>end()</code>","text":"<p>\u6a21\u578b\u8fd0\u884c\u7ed3\u675f\u540e\uff0c\u5c06\u81ea\u52a8\u7ed8\u5236\u72e9\u730e\u91c7\u96c6\u8005\u548c\u519c\u6c11\u7684\u6570\u91cf\u53d8\u5316</p> Source code in <code>src/model.py</code> <pre><code>def end(self):\n    \"\"\"\u6a21\u578b\u8fd0\u884c\u7ed3\u675f\u540e\uff0c\u5c06\u81ea\u52a8\u7ed8\u5236\u72e9\u730e\u91c7\u96c6\u8005\u548c\u519c\u6c11\u7684\u6570\u91cf\u53d8\u5316\"\"\"\n    self.plot()\n    plt.show()\n</code></pre>"},{"location":"api/model/#src.model.Model.heatmap","title":"<code>heatmap()</code>","text":"<p>\u7ed8\u5236\u72e9\u730e\u91c7\u96c6\u8005\u548c\u519c\u6c11\u7684\u7a7a\u95f4\u5206\u5e03</p> Source code in <code>src/model.py</code> <pre><code>def heatmap(self):\n    \"\"\"\u7ed8\u5236\u72e9\u730e\u91c7\u96c6\u8005\u548c\u519c\u6c11\u7684\u7a7a\u95f4\u5206\u5e03\"\"\"\n    _, (ax1, ax2) = plt.subplots(1, 2, figsize=(8, 3))\n    mask = self.nature.dem.get_xarray(\"elevation\") &gt;= 0\n    farmers = self.nature.dem.get_xarray(\"farmers\").where(mask)\n    hunters = self.nature.dem.get_xarray(\"hunters\").where(mask)\n    farmers.plot.contourf(ax=ax1, cmap=\"Reds\")\n    hunters.plot.contourf(ax=ax2, cmap=\"Greens\")\n    ax1.set_xlabel(\"Farmers\")\n    ax2.set_xlabel(\"Hunters\")\n</code></pre>"},{"location":"api/model/#src.model.Model.plot","title":"<code>plot()</code>","text":"<p>\u7ed8\u5236\u72e9\u730e\u91c7\u96c6\u8005\u548c\u519c\u6c11\u7684\u6570\u91cf\u53d8\u5316</p> Source code in <code>src/model.py</code> <pre><code>def plot(self):\n    \"\"\"\u7ed8\u5236\u72e9\u730e\u91c7\u96c6\u8005\u548c\u519c\u6c11\u7684\u6570\u91cf\u53d8\u5316\"\"\"\n    _, ax = plt.subplots()\n    ax.plot(self.farmers_num, label=\"farmers\")\n    ax.plot(self.hunters_num, label=\"hunters\")\n    ax.set_xlabel(\"time\")\n    ax.set_ylabel(\"population\")\n    ax.legend()\n</code></pre>"},{"location":"api/model/#src.model.Model.step","title":"<code>step()</code>","text":"<p>\u6bcf\u4e00\u65f6\u95f4\u6b65\u90fd\u6309\u7167\u4ee5\u4e0b\u987a\u5e8f\u6267\u884c\u4e00\u6b21\uff1a 1. \u66f4\u65b0\u519c\u6c11\u6570\u91cf 2. \u6240\u6709\u4e3b\u4f53\u4e92\u76f8\u8f6c\u5316 3. \u66f4\u65b0\u72e9\u730e\u91c7\u96c6\u8005\u53ef\u4ee5\u79fb\u52a8\uff08\u8fd9\u53ef\u80fd\u89e6\u53d1\u7ade\u4e89\uff09</p> Source code in <code>src/model.py</code> <pre><code>def step(self):\n    \"\"\"\u6bcf\u4e00\u65f6\u95f4\u6b65\u90fd\u6309\u7167\u4ee5\u4e0b\u987a\u5e8f\u6267\u884c\u4e00\u6b21\uff1a\n    1. \u66f4\u65b0\u519c\u6c11\u6570\u91cf\n    2. \u6240\u6709\u4e3b\u4f53\u4e92\u76f8\u8f6c\u5316\n    3. \u66f4\u65b0\u72e9\u730e\u91c7\u96c6\u8005\u53ef\u4ee5\u79fb\u52a8\uff08\u8fd9\u53ef\u80fd\u89e6\u53d1\u7ade\u4e89\uff09\n    \"\"\"\n    farmers = self.nature.add_farmers()\n    self.trigger(self.actors, \"population_growth\")\n    self.trigger(self.actors, \"convert\")\n    self.trigger(self.actors, \"diffuse\")\n    self.trigger(self.hunters, \"move\")\n    # \u66f4\u65b0\u519c\u6c11\u548c\u72e9\u730e\u91c7\u96c6\u8005\u6570\u91cf\n    self.new_farmers.append(len(farmers))\n    self.farmers_num.append(self.farmers.array(\"size\").sum())\n    self.hunters_num.append(self.hunters.array(\"size\").sum())\n</code></pre>"},{"location":"api/model/#src.model.Model.trigger","title":"<code>trigger(actors, func, *args, **kwargs)</code>","text":"<p>\u89e6\u53d1\u6240\u6709\u8fd8\u6d3b\u7740\u7684\u4e3b\u4f53\u7684\u884c\u52a8</p> Source code in <code>src/model.py</code> <pre><code>def trigger(self, actors: ActorsList, func: str, *args, **kwargs) -&gt; None:\n    \"\"\"\u89e6\u53d1\u6240\u6709\u8fd8\u6d3b\u7740\u7684\u4e3b\u4f53\u7684\u884c\u52a8\"\"\"\n    for actor in actors:\n        if not actor.on_earth:\n            continue\n        getattr(actor, func)(*args, **kwargs)\n</code></pre>"}]}